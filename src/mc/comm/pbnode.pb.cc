// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: mc/comm/pbnode.proto

#include "mc/comm/pbnode.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>

PROTOBUF_PRAGMA_INIT_SEG

namespace _pb = ::PROTOBUF_NAMESPACE_ID;
namespace _pbi = _pb::internal;

namespace mc {
namespace comm {
PROTOBUF_CONSTEXPR PBVec4::PBVec4(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.w_)*/0
  , /*decltype(_impl_.x_)*/0
  , /*decltype(_impl_.y_)*/0
  , /*decltype(_impl_.z_)*/0
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct PBVec4DefaultTypeInternal {
  PROTOBUF_CONSTEXPR PBVec4DefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~PBVec4DefaultTypeInternal() {}
  union {
    PBVec4 _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 PBVec4DefaultTypeInternal _PBVec4_default_instance_;
PROTOBUF_CONSTEXPR PBTransform::PBTransform(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.translate_)*/nullptr
  , /*decltype(_impl_.rotation_)*/nullptr
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct PBTransformDefaultTypeInternal {
  PROTOBUF_CONSTEXPR PBTransformDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~PBTransformDefaultTypeInternal() {}
  union {
    PBTransform _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 PBTransformDefaultTypeInternal _PBTransform_default_instance_;
PROTOBUF_CONSTEXPR PBNode::PBNode(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.act_logic_list_)*/{}
  , /*decltype(_impl_.model_list_)*/{}
  , /*decltype(_impl_.sub_list_)*/{}
  , /*decltype(_impl_.material_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.transform_)*/nullptr
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct PBNodeDefaultTypeInternal {
  PROTOBUF_CONSTEXPR PBNodeDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~PBNodeDefaultTypeInternal() {}
  union {
    PBNode _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 PBNodeDefaultTypeInternal _PBNode_default_instance_;
PROTOBUF_CONSTEXPR PBScene::PBScene(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.root_list_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct PBSceneDefaultTypeInternal {
  PROTOBUF_CONSTEXPR PBSceneDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~PBSceneDefaultTypeInternal() {}
  union {
    PBScene _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 PBSceneDefaultTypeInternal _PBScene_default_instance_;
}  // namespace comm
}  // namespace mc
static ::_pb::Metadata file_level_metadata_mc_2fcomm_2fpbnode_2eproto[4];
static constexpr ::_pb::EnumDescriptor const** file_level_enum_descriptors_mc_2fcomm_2fpbnode_2eproto = nullptr;
static constexpr ::_pb::ServiceDescriptor const** file_level_service_descriptors_mc_2fcomm_2fpbnode_2eproto = nullptr;

const uint32_t TableStruct_mc_2fcomm_2fpbnode_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::mc::comm::PBVec4, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::mc::comm::PBVec4, _impl_.w_),
  PROTOBUF_FIELD_OFFSET(::mc::comm::PBVec4, _impl_.x_),
  PROTOBUF_FIELD_OFFSET(::mc::comm::PBVec4, _impl_.y_),
  PROTOBUF_FIELD_OFFSET(::mc::comm::PBVec4, _impl_.z_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::mc::comm::PBTransform, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::mc::comm::PBTransform, _impl_.translate_),
  PROTOBUF_FIELD_OFFSET(::mc::comm::PBTransform, _impl_.rotation_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::mc::comm::PBNode, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::mc::comm::PBNode, _impl_.transform_),
  PROTOBUF_FIELD_OFFSET(::mc::comm::PBNode, _impl_.act_logic_list_),
  PROTOBUF_FIELD_OFFSET(::mc::comm::PBNode, _impl_.model_list_),
  PROTOBUF_FIELD_OFFSET(::mc::comm::PBNode, _impl_.material_),
  PROTOBUF_FIELD_OFFSET(::mc::comm::PBNode, _impl_.sub_list_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::mc::comm::PBScene, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::mc::comm::PBScene, _impl_.root_list_),
};
static const ::_pbi::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, -1, sizeof(::mc::comm::PBVec4)},
  { 10, -1, -1, sizeof(::mc::comm::PBTransform)},
  { 18, -1, -1, sizeof(::mc::comm::PBNode)},
  { 29, -1, -1, sizeof(::mc::comm::PBScene)},
};

static const ::_pb::Message* const file_default_instances[] = {
  &::mc::comm::_PBVec4_default_instance_._instance,
  &::mc::comm::_PBTransform_default_instance_._instance,
  &::mc::comm::_PBNode_default_instance_._instance,
  &::mc::comm::_PBScene_default_instance_._instance,
};

const char descriptor_table_protodef_mc_2fcomm_2fpbnode_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n\024mc/comm/pbnode.proto\022\007mc.comm\"4\n\006PBVec"
  "4\022\t\n\001w\030\001 \001(\002\022\t\n\001x\030\002 \001(\002\022\t\n\001y\030\003 \001(\002\022\t\n\001z\030"
  "\004 \001(\002\"T\n\013PBTransform\022\"\n\ttranslate\030\001 \001(\0132"
  "\017.mc.comm.PBVec4\022!\n\010rotation\030\002 \001(\0132\017.mc."
  "comm.PBVec4\"\222\001\n\006PBNode\022\'\n\ttransform\030\001 \001("
  "\0132\024.mc.comm.PBTransform\022\026\n\016act_logic_lis"
  "t\030\002 \003(\t\022\022\n\nmodel_list\030\003 \003(\t\022\020\n\010material\030"
  "\004 \001(\t\022!\n\010sub_list\030\005 \003(\0132\017.mc.comm.PBNode"
  "\"-\n\007PBScene\022\"\n\troot_list\030\001 \003(\0132\017.mc.comm"
  ".PBNodeB\tZ\007mc/commb\006proto3"
  ;
static ::_pbi::once_flag descriptor_table_mc_2fcomm_2fpbnode_2eproto_once;
const ::_pbi::DescriptorTable descriptor_table_mc_2fcomm_2fpbnode_2eproto = {
    false, false, 386, descriptor_table_protodef_mc_2fcomm_2fpbnode_2eproto,
    "mc/comm/pbnode.proto",
    &descriptor_table_mc_2fcomm_2fpbnode_2eproto_once, nullptr, 0, 4,
    schemas, file_default_instances, TableStruct_mc_2fcomm_2fpbnode_2eproto::offsets,
    file_level_metadata_mc_2fcomm_2fpbnode_2eproto, file_level_enum_descriptors_mc_2fcomm_2fpbnode_2eproto,
    file_level_service_descriptors_mc_2fcomm_2fpbnode_2eproto,
};
PROTOBUF_ATTRIBUTE_WEAK const ::_pbi::DescriptorTable* descriptor_table_mc_2fcomm_2fpbnode_2eproto_getter() {
  return &descriptor_table_mc_2fcomm_2fpbnode_2eproto;
}

// Force running AddDescriptors() at dynamic initialization time.
PROTOBUF_ATTRIBUTE_INIT_PRIORITY2 static ::_pbi::AddDescriptorsRunner dynamic_init_dummy_mc_2fcomm_2fpbnode_2eproto(&descriptor_table_mc_2fcomm_2fpbnode_2eproto);
namespace mc {
namespace comm {

// ===================================================================

class PBVec4::_Internal {
 public:
};

PBVec4::PBVec4(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:mc.comm.PBVec4)
}
PBVec4::PBVec4(const PBVec4& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  PBVec4* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.w_){}
    , decltype(_impl_.x_){}
    , decltype(_impl_.y_){}
    , decltype(_impl_.z_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&_impl_.w_, &from._impl_.w_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.z_) -
    reinterpret_cast<char*>(&_impl_.w_)) + sizeof(_impl_.z_));
  // @@protoc_insertion_point(copy_constructor:mc.comm.PBVec4)
}

inline void PBVec4::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.w_){0}
    , decltype(_impl_.x_){0}
    , decltype(_impl_.y_){0}
    , decltype(_impl_.z_){0}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

PBVec4::~PBVec4() {
  // @@protoc_insertion_point(destructor:mc.comm.PBVec4)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void PBVec4::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void PBVec4::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void PBVec4::Clear() {
// @@protoc_insertion_point(message_clear_start:mc.comm.PBVec4)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&_impl_.w_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&_impl_.z_) -
      reinterpret_cast<char*>(&_impl_.w_)) + sizeof(_impl_.z_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* PBVec4::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // float w = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 13)) {
          _impl_.w_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else
          goto handle_unusual;
        continue;
      // float x = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 21)) {
          _impl_.x_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else
          goto handle_unusual;
        continue;
      // float y = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 29)) {
          _impl_.y_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else
          goto handle_unusual;
        continue;
      // float z = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 37)) {
          _impl_.z_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* PBVec4::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:mc.comm.PBVec4)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // float w = 1;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_w = this->_internal_w();
  uint32_t raw_w;
  memcpy(&raw_w, &tmp_w, sizeof(tmp_w));
  if (raw_w != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFloatToArray(1, this->_internal_w(), target);
  }

  // float x = 2;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_x = this->_internal_x();
  uint32_t raw_x;
  memcpy(&raw_x, &tmp_x, sizeof(tmp_x));
  if (raw_x != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFloatToArray(2, this->_internal_x(), target);
  }

  // float y = 3;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_y = this->_internal_y();
  uint32_t raw_y;
  memcpy(&raw_y, &tmp_y, sizeof(tmp_y));
  if (raw_y != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFloatToArray(3, this->_internal_y(), target);
  }

  // float z = 4;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_z = this->_internal_z();
  uint32_t raw_z;
  memcpy(&raw_z, &tmp_z, sizeof(tmp_z));
  if (raw_z != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFloatToArray(4, this->_internal_z(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:mc.comm.PBVec4)
  return target;
}

size_t PBVec4::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:mc.comm.PBVec4)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // float w = 1;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_w = this->_internal_w();
  uint32_t raw_w;
  memcpy(&raw_w, &tmp_w, sizeof(tmp_w));
  if (raw_w != 0) {
    total_size += 1 + 4;
  }

  // float x = 2;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_x = this->_internal_x();
  uint32_t raw_x;
  memcpy(&raw_x, &tmp_x, sizeof(tmp_x));
  if (raw_x != 0) {
    total_size += 1 + 4;
  }

  // float y = 3;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_y = this->_internal_y();
  uint32_t raw_y;
  memcpy(&raw_y, &tmp_y, sizeof(tmp_y));
  if (raw_y != 0) {
    total_size += 1 + 4;
  }

  // float z = 4;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_z = this->_internal_z();
  uint32_t raw_z;
  memcpy(&raw_z, &tmp_z, sizeof(tmp_z));
  if (raw_z != 0) {
    total_size += 1 + 4;
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData PBVec4::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    PBVec4::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*PBVec4::GetClassData() const { return &_class_data_; }


void PBVec4::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<PBVec4*>(&to_msg);
  auto& from = static_cast<const PBVec4&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:mc.comm.PBVec4)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_w = from._internal_w();
  uint32_t raw_w;
  memcpy(&raw_w, &tmp_w, sizeof(tmp_w));
  if (raw_w != 0) {
    _this->_internal_set_w(from._internal_w());
  }
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_x = from._internal_x();
  uint32_t raw_x;
  memcpy(&raw_x, &tmp_x, sizeof(tmp_x));
  if (raw_x != 0) {
    _this->_internal_set_x(from._internal_x());
  }
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_y = from._internal_y();
  uint32_t raw_y;
  memcpy(&raw_y, &tmp_y, sizeof(tmp_y));
  if (raw_y != 0) {
    _this->_internal_set_y(from._internal_y());
  }
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_z = from._internal_z();
  uint32_t raw_z;
  memcpy(&raw_z, &tmp_z, sizeof(tmp_z));
  if (raw_z != 0) {
    _this->_internal_set_z(from._internal_z());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void PBVec4::CopyFrom(const PBVec4& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:mc.comm.PBVec4)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PBVec4::IsInitialized() const {
  return true;
}

void PBVec4::InternalSwap(PBVec4* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(PBVec4, _impl_.z_)
      + sizeof(PBVec4::_impl_.z_)
      - PROTOBUF_FIELD_OFFSET(PBVec4, _impl_.w_)>(
          reinterpret_cast<char*>(&_impl_.w_),
          reinterpret_cast<char*>(&other->_impl_.w_));
}

::PROTOBUF_NAMESPACE_ID::Metadata PBVec4::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_mc_2fcomm_2fpbnode_2eproto_getter, &descriptor_table_mc_2fcomm_2fpbnode_2eproto_once,
      file_level_metadata_mc_2fcomm_2fpbnode_2eproto[0]);
}

// ===================================================================

class PBTransform::_Internal {
 public:
  static const ::mc::comm::PBVec4& translate(const PBTransform* msg);
  static const ::mc::comm::PBVec4& rotation(const PBTransform* msg);
};

const ::mc::comm::PBVec4&
PBTransform::_Internal::translate(const PBTransform* msg) {
  return *msg->_impl_.translate_;
}
const ::mc::comm::PBVec4&
PBTransform::_Internal::rotation(const PBTransform* msg) {
  return *msg->_impl_.rotation_;
}
PBTransform::PBTransform(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:mc.comm.PBTransform)
}
PBTransform::PBTransform(const PBTransform& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  PBTransform* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.translate_){nullptr}
    , decltype(_impl_.rotation_){nullptr}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_translate()) {
    _this->_impl_.translate_ = new ::mc::comm::PBVec4(*from._impl_.translate_);
  }
  if (from._internal_has_rotation()) {
    _this->_impl_.rotation_ = new ::mc::comm::PBVec4(*from._impl_.rotation_);
  }
  // @@protoc_insertion_point(copy_constructor:mc.comm.PBTransform)
}

inline void PBTransform::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.translate_){nullptr}
    , decltype(_impl_.rotation_){nullptr}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

PBTransform::~PBTransform() {
  // @@protoc_insertion_point(destructor:mc.comm.PBTransform)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void PBTransform::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete _impl_.translate_;
  if (this != internal_default_instance()) delete _impl_.rotation_;
}

void PBTransform::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void PBTransform::Clear() {
// @@protoc_insertion_point(message_clear_start:mc.comm.PBTransform)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaForAllocation() == nullptr && _impl_.translate_ != nullptr) {
    delete _impl_.translate_;
  }
  _impl_.translate_ = nullptr;
  if (GetArenaForAllocation() == nullptr && _impl_.rotation_ != nullptr) {
    delete _impl_.rotation_;
  }
  _impl_.rotation_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* PBTransform::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .mc.comm.PBVec4 translate = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_translate(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .mc.comm.PBVec4 rotation = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_rotation(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* PBTransform::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:mc.comm.PBTransform)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .mc.comm.PBVec4 translate = 1;
  if (this->_internal_has_translate()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::translate(this),
        _Internal::translate(this).GetCachedSize(), target, stream);
  }

  // .mc.comm.PBVec4 rotation = 2;
  if (this->_internal_has_rotation()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, _Internal::rotation(this),
        _Internal::rotation(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:mc.comm.PBTransform)
  return target;
}

size_t PBTransform::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:mc.comm.PBTransform)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .mc.comm.PBVec4 translate = 1;
  if (this->_internal_has_translate()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.translate_);
  }

  // .mc.comm.PBVec4 rotation = 2;
  if (this->_internal_has_rotation()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.rotation_);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData PBTransform::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    PBTransform::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*PBTransform::GetClassData() const { return &_class_data_; }


void PBTransform::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<PBTransform*>(&to_msg);
  auto& from = static_cast<const PBTransform&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:mc.comm.PBTransform)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_translate()) {
    _this->_internal_mutable_translate()->::mc::comm::PBVec4::MergeFrom(
        from._internal_translate());
  }
  if (from._internal_has_rotation()) {
    _this->_internal_mutable_rotation()->::mc::comm::PBVec4::MergeFrom(
        from._internal_rotation());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void PBTransform::CopyFrom(const PBTransform& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:mc.comm.PBTransform)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PBTransform::IsInitialized() const {
  return true;
}

void PBTransform::InternalSwap(PBTransform* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(PBTransform, _impl_.rotation_)
      + sizeof(PBTransform::_impl_.rotation_)
      - PROTOBUF_FIELD_OFFSET(PBTransform, _impl_.translate_)>(
          reinterpret_cast<char*>(&_impl_.translate_),
          reinterpret_cast<char*>(&other->_impl_.translate_));
}

::PROTOBUF_NAMESPACE_ID::Metadata PBTransform::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_mc_2fcomm_2fpbnode_2eproto_getter, &descriptor_table_mc_2fcomm_2fpbnode_2eproto_once,
      file_level_metadata_mc_2fcomm_2fpbnode_2eproto[1]);
}

// ===================================================================

class PBNode::_Internal {
 public:
  static const ::mc::comm::PBTransform& transform(const PBNode* msg);
};

const ::mc::comm::PBTransform&
PBNode::_Internal::transform(const PBNode* msg) {
  return *msg->_impl_.transform_;
}
PBNode::PBNode(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:mc.comm.PBNode)
}
PBNode::PBNode(const PBNode& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  PBNode* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.act_logic_list_){from._impl_.act_logic_list_}
    , decltype(_impl_.model_list_){from._impl_.model_list_}
    , decltype(_impl_.sub_list_){from._impl_.sub_list_}
    , decltype(_impl_.material_){}
    , decltype(_impl_.transform_){nullptr}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.material_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.material_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_material().empty()) {
    _this->_impl_.material_.Set(from._internal_material(), 
      _this->GetArenaForAllocation());
  }
  if (from._internal_has_transform()) {
    _this->_impl_.transform_ = new ::mc::comm::PBTransform(*from._impl_.transform_);
  }
  // @@protoc_insertion_point(copy_constructor:mc.comm.PBNode)
}

inline void PBNode::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.act_logic_list_){arena}
    , decltype(_impl_.model_list_){arena}
    , decltype(_impl_.sub_list_){arena}
    , decltype(_impl_.material_){}
    , decltype(_impl_.transform_){nullptr}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.material_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.material_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

PBNode::~PBNode() {
  // @@protoc_insertion_point(destructor:mc.comm.PBNode)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void PBNode::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.act_logic_list_.~RepeatedPtrField();
  _impl_.model_list_.~RepeatedPtrField();
  _impl_.sub_list_.~RepeatedPtrField();
  _impl_.material_.Destroy();
  if (this != internal_default_instance()) delete _impl_.transform_;
}

void PBNode::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void PBNode::Clear() {
// @@protoc_insertion_point(message_clear_start:mc.comm.PBNode)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.act_logic_list_.Clear();
  _impl_.model_list_.Clear();
  _impl_.sub_list_.Clear();
  _impl_.material_.ClearToEmpty();
  if (GetArenaForAllocation() == nullptr && _impl_.transform_ != nullptr) {
    delete _impl_.transform_;
  }
  _impl_.transform_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* PBNode::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .mc.comm.PBTransform transform = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_transform(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated string act_logic_list = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            auto str = _internal_add_act_logic_list();
            ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
            CHK_(ptr);
            CHK_(::_pbi::VerifyUTF8(str, "mc.comm.PBNode.act_logic_list"));
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else
          goto handle_unusual;
        continue;
      // repeated string model_list = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          ptr -= 1;
          do {
            ptr += 1;
            auto str = _internal_add_model_list();
            ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
            CHK_(ptr);
            CHK_(::_pbi::VerifyUTF8(str, "mc.comm.PBNode.model_list"));
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<26>(ptr));
        } else
          goto handle_unusual;
        continue;
      // string material = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          auto str = _internal_mutable_material();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "mc.comm.PBNode.material"));
        } else
          goto handle_unusual;
        continue;
      // repeated .mc.comm.PBNode sub_list = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 42)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_sub_list(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<42>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* PBNode::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:mc.comm.PBNode)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .mc.comm.PBTransform transform = 1;
  if (this->_internal_has_transform()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::transform(this),
        _Internal::transform(this).GetCachedSize(), target, stream);
  }

  // repeated string act_logic_list = 2;
  for (int i = 0, n = this->_internal_act_logic_list_size(); i < n; i++) {
    const auto& s = this->_internal_act_logic_list(i);
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      s.data(), static_cast<int>(s.length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "mc.comm.PBNode.act_logic_list");
    target = stream->WriteString(2, s, target);
  }

  // repeated string model_list = 3;
  for (int i = 0, n = this->_internal_model_list_size(); i < n; i++) {
    const auto& s = this->_internal_model_list(i);
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      s.data(), static_cast<int>(s.length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "mc.comm.PBNode.model_list");
    target = stream->WriteString(3, s, target);
  }

  // string material = 4;
  if (!this->_internal_material().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_material().data(), static_cast<int>(this->_internal_material().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "mc.comm.PBNode.material");
    target = stream->WriteStringMaybeAliased(
        4, this->_internal_material(), target);
  }

  // repeated .mc.comm.PBNode sub_list = 5;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_sub_list_size()); i < n; i++) {
    const auto& repfield = this->_internal_sub_list(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(5, repfield, repfield.GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:mc.comm.PBNode)
  return target;
}

size_t PBNode::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:mc.comm.PBNode)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated string act_logic_list = 2;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(_impl_.act_logic_list_.size());
  for (int i = 0, n = _impl_.act_logic_list_.size(); i < n; i++) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
      _impl_.act_logic_list_.Get(i));
  }

  // repeated string model_list = 3;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(_impl_.model_list_.size());
  for (int i = 0, n = _impl_.model_list_.size(); i < n; i++) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
      _impl_.model_list_.Get(i));
  }

  // repeated .mc.comm.PBNode sub_list = 5;
  total_size += 1UL * this->_internal_sub_list_size();
  for (const auto& msg : this->_impl_.sub_list_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // string material = 4;
  if (!this->_internal_material().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_material());
  }

  // .mc.comm.PBTransform transform = 1;
  if (this->_internal_has_transform()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.transform_);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData PBNode::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    PBNode::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*PBNode::GetClassData() const { return &_class_data_; }


void PBNode::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<PBNode*>(&to_msg);
  auto& from = static_cast<const PBNode&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:mc.comm.PBNode)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.act_logic_list_.MergeFrom(from._impl_.act_logic_list_);
  _this->_impl_.model_list_.MergeFrom(from._impl_.model_list_);
  _this->_impl_.sub_list_.MergeFrom(from._impl_.sub_list_);
  if (!from._internal_material().empty()) {
    _this->_internal_set_material(from._internal_material());
  }
  if (from._internal_has_transform()) {
    _this->_internal_mutable_transform()->::mc::comm::PBTransform::MergeFrom(
        from._internal_transform());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void PBNode::CopyFrom(const PBNode& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:mc.comm.PBNode)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PBNode::IsInitialized() const {
  return true;
}

void PBNode::InternalSwap(PBNode* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.act_logic_list_.InternalSwap(&other->_impl_.act_logic_list_);
  _impl_.model_list_.InternalSwap(&other->_impl_.model_list_);
  _impl_.sub_list_.InternalSwap(&other->_impl_.sub_list_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.material_, lhs_arena,
      &other->_impl_.material_, rhs_arena
  );
  swap(_impl_.transform_, other->_impl_.transform_);
}

::PROTOBUF_NAMESPACE_ID::Metadata PBNode::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_mc_2fcomm_2fpbnode_2eproto_getter, &descriptor_table_mc_2fcomm_2fpbnode_2eproto_once,
      file_level_metadata_mc_2fcomm_2fpbnode_2eproto[2]);
}

// ===================================================================

class PBScene::_Internal {
 public:
};

PBScene::PBScene(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:mc.comm.PBScene)
}
PBScene::PBScene(const PBScene& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  PBScene* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.root_list_){from._impl_.root_list_}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:mc.comm.PBScene)
}

inline void PBScene::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.root_list_){arena}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

PBScene::~PBScene() {
  // @@protoc_insertion_point(destructor:mc.comm.PBScene)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void PBScene::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.root_list_.~RepeatedPtrField();
}

void PBScene::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void PBScene::Clear() {
// @@protoc_insertion_point(message_clear_start:mc.comm.PBScene)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.root_list_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* PBScene::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // repeated .mc.comm.PBNode root_list = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_root_list(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* PBScene::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:mc.comm.PBScene)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .mc.comm.PBNode root_list = 1;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_root_list_size()); i < n; i++) {
    const auto& repfield = this->_internal_root_list(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(1, repfield, repfield.GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:mc.comm.PBScene)
  return target;
}

size_t PBScene::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:mc.comm.PBScene)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .mc.comm.PBNode root_list = 1;
  total_size += 1UL * this->_internal_root_list_size();
  for (const auto& msg : this->_impl_.root_list_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData PBScene::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    PBScene::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*PBScene::GetClassData() const { return &_class_data_; }


void PBScene::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<PBScene*>(&to_msg);
  auto& from = static_cast<const PBScene&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:mc.comm.PBScene)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.root_list_.MergeFrom(from._impl_.root_list_);
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void PBScene::CopyFrom(const PBScene& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:mc.comm.PBScene)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PBScene::IsInitialized() const {
  return true;
}

void PBScene::InternalSwap(PBScene* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.root_list_.InternalSwap(&other->_impl_.root_list_);
}

::PROTOBUF_NAMESPACE_ID::Metadata PBScene::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_mc_2fcomm_2fpbnode_2eproto_getter, &descriptor_table_mc_2fcomm_2fpbnode_2eproto_once,
      file_level_metadata_mc_2fcomm_2fpbnode_2eproto[3]);
}

// @@protoc_insertion_point(namespace_scope)
}  // namespace comm
}  // namespace mc
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::mc::comm::PBVec4*
Arena::CreateMaybeMessage< ::mc::comm::PBVec4 >(Arena* arena) {
  return Arena::CreateMessageInternal< ::mc::comm::PBVec4 >(arena);
}
template<> PROTOBUF_NOINLINE ::mc::comm::PBTransform*
Arena::CreateMaybeMessage< ::mc::comm::PBTransform >(Arena* arena) {
  return Arena::CreateMessageInternal< ::mc::comm::PBTransform >(arena);
}
template<> PROTOBUF_NOINLINE ::mc::comm::PBNode*
Arena::CreateMaybeMessage< ::mc::comm::PBNode >(Arena* arena) {
  return Arena::CreateMessageInternal< ::mc::comm::PBNode >(arena);
}
template<> PROTOBUF_NOINLINE ::mc::comm::PBScene*
Arena::CreateMaybeMessage< ::mc::comm::PBScene >(Arena* arena) {
  return Arena::CreateMessageInternal< ::mc::comm::PBScene >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
