// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: mc/comm/gltf.proto

#include "mc/comm/gltf.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>

PROTOBUF_PRAGMA_INIT_SEG

namespace _pb = ::PROTOBUF_NAMESPACE_ID;
namespace _pbi = _pb::internal;

namespace mc {
namespace comm {
PROTOBUF_CONSTEXPR Scene::Scene(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.nodes_)*/{}
  , /*decltype(_impl_._nodes_cached_byte_size_)*/{0}
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct SceneDefaultTypeInternal {
  PROTOBUF_CONSTEXPR SceneDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~SceneDefaultTypeInternal() {}
  union {
    Scene _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 SceneDefaultTypeInternal _Scene_default_instance_;
PROTOBUF_CONSTEXPR Node::Node(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.mesh_)*/0
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct NodeDefaultTypeInternal {
  PROTOBUF_CONSTEXPR NodeDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~NodeDefaultTypeInternal() {}
  union {
    Node _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 NodeDefaultTypeInternal _Node_default_instance_;
PROTOBUF_CONSTEXPR Attributes::Attributes(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.position_)*/0
  , /*decltype(_impl_.normal_)*/0
  , /*decltype(_impl_.texcoord_0_)*/0
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct AttributesDefaultTypeInternal {
  PROTOBUF_CONSTEXPR AttributesDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~AttributesDefaultTypeInternal() {}
  union {
    Attributes _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 AttributesDefaultTypeInternal _Attributes_default_instance_;
PROTOBUF_CONSTEXPR Primitive::Primitive(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.attributes_)*/nullptr
  , /*decltype(_impl_.indices_)*/0
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct PrimitiveDefaultTypeInternal {
  PROTOBUF_CONSTEXPR PrimitiveDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~PrimitiveDefaultTypeInternal() {}
  union {
    Primitive _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 PrimitiveDefaultTypeInternal _Primitive_default_instance_;
PROTOBUF_CONSTEXPR Mesh::Mesh(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.primitives_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct MeshDefaultTypeInternal {
  PROTOBUF_CONSTEXPR MeshDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~MeshDefaultTypeInternal() {}
  union {
    Mesh _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 MeshDefaultTypeInternal _Mesh_default_instance_;
PROTOBUF_CONSTEXPR Texture::Texture(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.sampler_)*/0
  , /*decltype(_impl_.source_)*/0
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct TextureDefaultTypeInternal {
  PROTOBUF_CONSTEXPR TextureDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~TextureDefaultTypeInternal() {}
  union {
    Texture _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 TextureDefaultTypeInternal _Texture_default_instance_;
PROTOBUF_CONSTEXPR Image::Image(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.uri_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct ImageDefaultTypeInternal {
  PROTOBUF_CONSTEXPR ImageDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~ImageDefaultTypeInternal() {}
  union {
    Image _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 ImageDefaultTypeInternal _Image_default_instance_;
PROTOBUF_CONSTEXPR Sampler::Sampler(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.magfilter_)*/0
  , /*decltype(_impl_.minfilter_)*/0
  , /*decltype(_impl_.wraps_)*/0
  , /*decltype(_impl_.wrapt_)*/0
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct SamplerDefaultTypeInternal {
  PROTOBUF_CONSTEXPR SamplerDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~SamplerDefaultTypeInternal() {}
  union {
    Sampler _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 SamplerDefaultTypeInternal _Sampler_default_instance_;
PROTOBUF_CONSTEXPR Buffer::Buffer(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.uri_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.bytelength_)*/0
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct BufferDefaultTypeInternal {
  PROTOBUF_CONSTEXPR BufferDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~BufferDefaultTypeInternal() {}
  union {
    Buffer _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 BufferDefaultTypeInternal _Buffer_default_instance_;
PROTOBUF_CONSTEXPR BufferView::BufferView(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.buffer_)*/0
  , /*decltype(_impl_.byteoffset_)*/0
  , /*decltype(_impl_.bytelength_)*/0
  , /*decltype(_impl_.bytestride_)*/0
  , /*decltype(_impl_.target_)*/0
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct BufferViewDefaultTypeInternal {
  PROTOBUF_CONSTEXPR BufferViewDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~BufferViewDefaultTypeInternal() {}
  union {
    BufferView _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 BufferViewDefaultTypeInternal _BufferView_default_instance_;
PROTOBUF_CONSTEXPR Accessor::Accessor(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.max_)*/{}
  , /*decltype(_impl_.min_)*/{}
  , /*decltype(_impl_.type_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.bufferview_)*/0
  , /*decltype(_impl_.byteoffset_)*/0
  , /*decltype(_impl_.componenttype_)*/0
  , /*decltype(_impl_.count_)*/0
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct AccessorDefaultTypeInternal {
  PROTOBUF_CONSTEXPR AccessorDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~AccessorDefaultTypeInternal() {}
  union {
    Accessor _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 AccessorDefaultTypeInternal _Accessor_default_instance_;
PROTOBUF_CONSTEXPR Asset::Asset(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.version_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct AssetDefaultTypeInternal {
  PROTOBUF_CONSTEXPR AssetDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~AssetDefaultTypeInternal() {}
  union {
    Asset _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 AssetDefaultTypeInternal _Asset_default_instance_;
PROTOBUF_CONSTEXPR GLTF::GLTF(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.scenes_)*/{}
  , /*decltype(_impl_.nodes_)*/{}
  , /*decltype(_impl_.meshes_)*/{}
  , /*decltype(_impl_.textures_)*/{}
  , /*decltype(_impl_.images_)*/{}
  , /*decltype(_impl_.samplers_)*/{}
  , /*decltype(_impl_.buffers_)*/{}
  , /*decltype(_impl_.bufferviews_)*/{}
  , /*decltype(_impl_.accessors_)*/{}
  , /*decltype(_impl_.asset_)*/nullptr
  , /*decltype(_impl_.scene_)*/0
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct GLTFDefaultTypeInternal {
  PROTOBUF_CONSTEXPR GLTFDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~GLTFDefaultTypeInternal() {}
  union {
    GLTF _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 GLTFDefaultTypeInternal _GLTF_default_instance_;
}  // namespace comm
}  // namespace mc
static ::_pb::Metadata file_level_metadata_mc_2fcomm_2fgltf_2eproto[13];
static constexpr ::_pb::EnumDescriptor const** file_level_enum_descriptors_mc_2fcomm_2fgltf_2eproto = nullptr;
static constexpr ::_pb::ServiceDescriptor const** file_level_service_descriptors_mc_2fcomm_2fgltf_2eproto = nullptr;

const uint32_t TableStruct_mc_2fcomm_2fgltf_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::mc::comm::Scene, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::mc::comm::Scene, _impl_.nodes_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::mc::comm::Node, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::mc::comm::Node, _impl_.mesh_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::mc::comm::Attributes, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::mc::comm::Attributes, _impl_.position_),
  PROTOBUF_FIELD_OFFSET(::mc::comm::Attributes, _impl_.normal_),
  PROTOBUF_FIELD_OFFSET(::mc::comm::Attributes, _impl_.texcoord_0_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::mc::comm::Primitive, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::mc::comm::Primitive, _impl_.indices_),
  PROTOBUF_FIELD_OFFSET(::mc::comm::Primitive, _impl_.attributes_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::mc::comm::Mesh, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::mc::comm::Mesh, _impl_.primitives_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::mc::comm::Texture, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::mc::comm::Texture, _impl_.sampler_),
  PROTOBUF_FIELD_OFFSET(::mc::comm::Texture, _impl_.source_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::mc::comm::Image, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::mc::comm::Image, _impl_.uri_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::mc::comm::Sampler, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::mc::comm::Sampler, _impl_.magfilter_),
  PROTOBUF_FIELD_OFFSET(::mc::comm::Sampler, _impl_.minfilter_),
  PROTOBUF_FIELD_OFFSET(::mc::comm::Sampler, _impl_.wraps_),
  PROTOBUF_FIELD_OFFSET(::mc::comm::Sampler, _impl_.wrapt_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::mc::comm::Buffer, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::mc::comm::Buffer, _impl_.uri_),
  PROTOBUF_FIELD_OFFSET(::mc::comm::Buffer, _impl_.bytelength_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::mc::comm::BufferView, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::mc::comm::BufferView, _impl_.buffer_),
  PROTOBUF_FIELD_OFFSET(::mc::comm::BufferView, _impl_.byteoffset_),
  PROTOBUF_FIELD_OFFSET(::mc::comm::BufferView, _impl_.bytelength_),
  PROTOBUF_FIELD_OFFSET(::mc::comm::BufferView, _impl_.bytestride_),
  PROTOBUF_FIELD_OFFSET(::mc::comm::BufferView, _impl_.target_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::mc::comm::Accessor, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::mc::comm::Accessor, _impl_.bufferview_),
  PROTOBUF_FIELD_OFFSET(::mc::comm::Accessor, _impl_.byteoffset_),
  PROTOBUF_FIELD_OFFSET(::mc::comm::Accessor, _impl_.componenttype_),
  PROTOBUF_FIELD_OFFSET(::mc::comm::Accessor, _impl_.count_),
  PROTOBUF_FIELD_OFFSET(::mc::comm::Accessor, _impl_.type_),
  PROTOBUF_FIELD_OFFSET(::mc::comm::Accessor, _impl_.max_),
  PROTOBUF_FIELD_OFFSET(::mc::comm::Accessor, _impl_.min_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::mc::comm::Asset, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::mc::comm::Asset, _impl_.version_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::mc::comm::GLTF, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::mc::comm::GLTF, _impl_.scene_),
  PROTOBUF_FIELD_OFFSET(::mc::comm::GLTF, _impl_.scenes_),
  PROTOBUF_FIELD_OFFSET(::mc::comm::GLTF, _impl_.nodes_),
  PROTOBUF_FIELD_OFFSET(::mc::comm::GLTF, _impl_.meshes_),
  PROTOBUF_FIELD_OFFSET(::mc::comm::GLTF, _impl_.textures_),
  PROTOBUF_FIELD_OFFSET(::mc::comm::GLTF, _impl_.images_),
  PROTOBUF_FIELD_OFFSET(::mc::comm::GLTF, _impl_.samplers_),
  PROTOBUF_FIELD_OFFSET(::mc::comm::GLTF, _impl_.buffers_),
  PROTOBUF_FIELD_OFFSET(::mc::comm::GLTF, _impl_.bufferviews_),
  PROTOBUF_FIELD_OFFSET(::mc::comm::GLTF, _impl_.accessors_),
  PROTOBUF_FIELD_OFFSET(::mc::comm::GLTF, _impl_.asset_),
};
static const ::_pbi::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, -1, sizeof(::mc::comm::Scene)},
  { 7, -1, -1, sizeof(::mc::comm::Node)},
  { 14, -1, -1, sizeof(::mc::comm::Attributes)},
  { 23, -1, -1, sizeof(::mc::comm::Primitive)},
  { 31, -1, -1, sizeof(::mc::comm::Mesh)},
  { 38, -1, -1, sizeof(::mc::comm::Texture)},
  { 46, -1, -1, sizeof(::mc::comm::Image)},
  { 53, -1, -1, sizeof(::mc::comm::Sampler)},
  { 63, -1, -1, sizeof(::mc::comm::Buffer)},
  { 71, -1, -1, sizeof(::mc::comm::BufferView)},
  { 82, -1, -1, sizeof(::mc::comm::Accessor)},
  { 95, -1, -1, sizeof(::mc::comm::Asset)},
  { 102, -1, -1, sizeof(::mc::comm::GLTF)},
};

static const ::_pb::Message* const file_default_instances[] = {
  &::mc::comm::_Scene_default_instance_._instance,
  &::mc::comm::_Node_default_instance_._instance,
  &::mc::comm::_Attributes_default_instance_._instance,
  &::mc::comm::_Primitive_default_instance_._instance,
  &::mc::comm::_Mesh_default_instance_._instance,
  &::mc::comm::_Texture_default_instance_._instance,
  &::mc::comm::_Image_default_instance_._instance,
  &::mc::comm::_Sampler_default_instance_._instance,
  &::mc::comm::_Buffer_default_instance_._instance,
  &::mc::comm::_BufferView_default_instance_._instance,
  &::mc::comm::_Accessor_default_instance_._instance,
  &::mc::comm::_Asset_default_instance_._instance,
  &::mc::comm::_GLTF_default_instance_._instance,
};

const char descriptor_table_protodef_mc_2fcomm_2fgltf_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n\022mc/comm/gltf.proto\022\007mc.comm\"\026\n\005Scene\022\r"
  "\n\005nodes\030\001 \003(\005\"\024\n\004Node\022\014\n\004mesh\030\001 \001(\005\"B\n\nA"
  "ttributes\022\020\n\010POSITION\030\001 \001(\005\022\016\n\006NORMAL\030\002 "
  "\001(\005\022\022\n\nTEXCOORD_0\030\003 \001(\005\"E\n\tPrimitive\022\017\n\007"
  "indices\030\001 \001(\005\022\'\n\nattributes\030\002 \001(\0132\023.mc.c"
  "omm.Attributes\".\n\004Mesh\022&\n\nprimitives\030\001 \003"
  "(\0132\022.mc.comm.Primitive\"*\n\007Texture\022\017\n\007sam"
  "pler\030\001 \001(\005\022\016\n\006source\030\002 \001(\005\"\024\n\005Image\022\013\n\003u"
  "ri\030\001 \001(\t\"M\n\007Sampler\022\021\n\tmagFilter\030\001 \001(\005\022\021"
  "\n\tminFilter\030\002 \001(\005\022\r\n\005wrapS\030\003 \001(\005\022\r\n\005wrap"
  "T\030\004 \001(\005\")\n\006Buffer\022\013\n\003uri\030\001 \001(\t\022\022\n\nbyteLe"
  "ngth\030\002 \001(\005\"h\n\nBufferView\022\016\n\006buffer\030\001 \001(\005"
  "\022\022\n\nbyteOffset\030\002 \001(\005\022\022\n\nbyteLength\030\003 \001(\005"
  "\022\022\n\nbyteStride\030\004 \001(\005\022\016\n\006target\030\005 \001(\005\"\200\001\n"
  "\010Accessor\022\022\n\nbufferView\030\001 \001(\005\022\022\n\nbyteOff"
  "set\030\002 \001(\005\022\025\n\rcomponentType\030\003 \001(\005\022\r\n\005coun"
  "t\030\004 \001(\005\022\014\n\004type\030\005 \001(\t\022\013\n\003max\030\006 \003(\002\022\013\n\003mi"
  "n\030\007 \003(\002\"\030\n\005Asset\022\017\n\007version\030\001 \001(\t\"\353\002\n\004GL"
  "TF\022\r\n\005scene\030\001 \001(\005\022\036\n\006scenes\030\002 \003(\0132\016.mc.c"
  "omm.Scene\022\034\n\005nodes\030\003 \003(\0132\r.mc.comm.Node\022"
  "\035\n\006meshes\030\004 \003(\0132\r.mc.comm.Mesh\022\"\n\010textur"
  "es\030\005 \003(\0132\020.mc.comm.Texture\022\036\n\006images\030\006 \003"
  "(\0132\016.mc.comm.Image\022\"\n\010samplers\030\007 \003(\0132\020.m"
  "c.comm.Sampler\022 \n\007buffers\030\010 \003(\0132\017.mc.com"
  "m.Buffer\022(\n\013bufferViews\030\t \003(\0132\023.mc.comm."
  "BufferView\022$\n\taccessors\030\n \003(\0132\021.mc.comm."
  "Accessor\022\035\n\005asset\030\013 \001(\0132\016.mc.comm.AssetB"
  "\tZ\007mc/commb\006proto3"
  ;
static ::_pbi::once_flag descriptor_table_mc_2fcomm_2fgltf_2eproto_once;
const ::_pbi::DescriptorTable descriptor_table_mc_2fcomm_2fgltf_2eproto = {
    false, false, 1098, descriptor_table_protodef_mc_2fcomm_2fgltf_2eproto,
    "mc/comm/gltf.proto",
    &descriptor_table_mc_2fcomm_2fgltf_2eproto_once, nullptr, 0, 13,
    schemas, file_default_instances, TableStruct_mc_2fcomm_2fgltf_2eproto::offsets,
    file_level_metadata_mc_2fcomm_2fgltf_2eproto, file_level_enum_descriptors_mc_2fcomm_2fgltf_2eproto,
    file_level_service_descriptors_mc_2fcomm_2fgltf_2eproto,
};
PROTOBUF_ATTRIBUTE_WEAK const ::_pbi::DescriptorTable* descriptor_table_mc_2fcomm_2fgltf_2eproto_getter() {
  return &descriptor_table_mc_2fcomm_2fgltf_2eproto;
}

// Force running AddDescriptors() at dynamic initialization time.
PROTOBUF_ATTRIBUTE_INIT_PRIORITY2 static ::_pbi::AddDescriptorsRunner dynamic_init_dummy_mc_2fcomm_2fgltf_2eproto(&descriptor_table_mc_2fcomm_2fgltf_2eproto);
namespace mc {
namespace comm {

// ===================================================================

class Scene::_Internal {
 public:
};

Scene::Scene(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:mc.comm.Scene)
}
Scene::Scene(const Scene& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  Scene* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.nodes_){from._impl_.nodes_}
    , /*decltype(_impl_._nodes_cached_byte_size_)*/{0}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:mc.comm.Scene)
}

inline void Scene::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.nodes_){arena}
    , /*decltype(_impl_._nodes_cached_byte_size_)*/{0}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

Scene::~Scene() {
  // @@protoc_insertion_point(destructor:mc.comm.Scene)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void Scene::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.nodes_.~RepeatedField();
}

void Scene::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void Scene::Clear() {
// @@protoc_insertion_point(message_clear_start:mc.comm.Scene)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.nodes_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Scene::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // repeated int32 nodes = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedInt32Parser(_internal_mutable_nodes(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<uint8_t>(tag) == 8) {
          _internal_add_nodes(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* Scene::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:mc.comm.Scene)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated int32 nodes = 1;
  {
    int byte_size = _impl_._nodes_cached_byte_size_.load(std::memory_order_relaxed);
    if (byte_size > 0) {
      target = stream->WriteInt32Packed(
          1, _internal_nodes(), byte_size, target);
    }
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:mc.comm.Scene)
  return target;
}

size_t Scene::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:mc.comm.Scene)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated int32 nodes = 1;
  {
    size_t data_size = ::_pbi::WireFormatLite::
      Int32Size(this->_impl_.nodes_);
    if (data_size > 0) {
      total_size += 1 +
        ::_pbi::WireFormatLite::Int32Size(static_cast<int32_t>(data_size));
    }
    int cached_size = ::_pbi::ToCachedSize(data_size);
    _impl_._nodes_cached_byte_size_.store(cached_size,
                                    std::memory_order_relaxed);
    total_size += data_size;
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData Scene::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    Scene::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*Scene::GetClassData() const { return &_class_data_; }


void Scene::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<Scene*>(&to_msg);
  auto& from = static_cast<const Scene&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:mc.comm.Scene)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.nodes_.MergeFrom(from._impl_.nodes_);
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void Scene::CopyFrom(const Scene& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:mc.comm.Scene)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Scene::IsInitialized() const {
  return true;
}

void Scene::InternalSwap(Scene* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.nodes_.InternalSwap(&other->_impl_.nodes_);
}

::PROTOBUF_NAMESPACE_ID::Metadata Scene::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_mc_2fcomm_2fgltf_2eproto_getter, &descriptor_table_mc_2fcomm_2fgltf_2eproto_once,
      file_level_metadata_mc_2fcomm_2fgltf_2eproto[0]);
}

// ===================================================================

class Node::_Internal {
 public:
};

Node::Node(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:mc.comm.Node)
}
Node::Node(const Node& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  Node* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.mesh_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _this->_impl_.mesh_ = from._impl_.mesh_;
  // @@protoc_insertion_point(copy_constructor:mc.comm.Node)
}

inline void Node::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.mesh_){0}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

Node::~Node() {
  // @@protoc_insertion_point(destructor:mc.comm.Node)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void Node::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void Node::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void Node::Clear() {
// @@protoc_insertion_point(message_clear_start:mc.comm.Node)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.mesh_ = 0;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Node::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // int32 mesh = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _impl_.mesh_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* Node::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:mc.comm.Node)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 mesh = 1;
  if (this->_internal_mesh() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(1, this->_internal_mesh(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:mc.comm.Node)
  return target;
}

size_t Node::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:mc.comm.Node)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // int32 mesh = 1;
  if (this->_internal_mesh() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_mesh());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData Node::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    Node::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*Node::GetClassData() const { return &_class_data_; }


void Node::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<Node*>(&to_msg);
  auto& from = static_cast<const Node&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:mc.comm.Node)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_mesh() != 0) {
    _this->_internal_set_mesh(from._internal_mesh());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void Node::CopyFrom(const Node& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:mc.comm.Node)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Node::IsInitialized() const {
  return true;
}

void Node::InternalSwap(Node* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_.mesh_, other->_impl_.mesh_);
}

::PROTOBUF_NAMESPACE_ID::Metadata Node::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_mc_2fcomm_2fgltf_2eproto_getter, &descriptor_table_mc_2fcomm_2fgltf_2eproto_once,
      file_level_metadata_mc_2fcomm_2fgltf_2eproto[1]);
}

// ===================================================================

class Attributes::_Internal {
 public:
};

Attributes::Attributes(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:mc.comm.Attributes)
}
Attributes::Attributes(const Attributes& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  Attributes* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.position_){}
    , decltype(_impl_.normal_){}
    , decltype(_impl_.texcoord_0_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&_impl_.position_, &from._impl_.position_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.texcoord_0_) -
    reinterpret_cast<char*>(&_impl_.position_)) + sizeof(_impl_.texcoord_0_));
  // @@protoc_insertion_point(copy_constructor:mc.comm.Attributes)
}

inline void Attributes::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.position_){0}
    , decltype(_impl_.normal_){0}
    , decltype(_impl_.texcoord_0_){0}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

Attributes::~Attributes() {
  // @@protoc_insertion_point(destructor:mc.comm.Attributes)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void Attributes::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void Attributes::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void Attributes::Clear() {
// @@protoc_insertion_point(message_clear_start:mc.comm.Attributes)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&_impl_.position_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&_impl_.texcoord_0_) -
      reinterpret_cast<char*>(&_impl_.position_)) + sizeof(_impl_.texcoord_0_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Attributes::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // int32 POSITION = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _impl_.position_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int32 NORMAL = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _impl_.normal_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int32 TEXCOORD_0 = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          _impl_.texcoord_0_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* Attributes::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:mc.comm.Attributes)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 POSITION = 1;
  if (this->_internal_position() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(1, this->_internal_position(), target);
  }

  // int32 NORMAL = 2;
  if (this->_internal_normal() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(2, this->_internal_normal(), target);
  }

  // int32 TEXCOORD_0 = 3;
  if (this->_internal_texcoord_0() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(3, this->_internal_texcoord_0(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:mc.comm.Attributes)
  return target;
}

size_t Attributes::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:mc.comm.Attributes)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // int32 POSITION = 1;
  if (this->_internal_position() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_position());
  }

  // int32 NORMAL = 2;
  if (this->_internal_normal() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_normal());
  }

  // int32 TEXCOORD_0 = 3;
  if (this->_internal_texcoord_0() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_texcoord_0());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData Attributes::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    Attributes::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*Attributes::GetClassData() const { return &_class_data_; }


void Attributes::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<Attributes*>(&to_msg);
  auto& from = static_cast<const Attributes&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:mc.comm.Attributes)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_position() != 0) {
    _this->_internal_set_position(from._internal_position());
  }
  if (from._internal_normal() != 0) {
    _this->_internal_set_normal(from._internal_normal());
  }
  if (from._internal_texcoord_0() != 0) {
    _this->_internal_set_texcoord_0(from._internal_texcoord_0());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void Attributes::CopyFrom(const Attributes& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:mc.comm.Attributes)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Attributes::IsInitialized() const {
  return true;
}

void Attributes::InternalSwap(Attributes* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(Attributes, _impl_.texcoord_0_)
      + sizeof(Attributes::_impl_.texcoord_0_)
      - PROTOBUF_FIELD_OFFSET(Attributes, _impl_.position_)>(
          reinterpret_cast<char*>(&_impl_.position_),
          reinterpret_cast<char*>(&other->_impl_.position_));
}

::PROTOBUF_NAMESPACE_ID::Metadata Attributes::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_mc_2fcomm_2fgltf_2eproto_getter, &descriptor_table_mc_2fcomm_2fgltf_2eproto_once,
      file_level_metadata_mc_2fcomm_2fgltf_2eproto[2]);
}

// ===================================================================

class Primitive::_Internal {
 public:
  static const ::mc::comm::Attributes& attributes(const Primitive* msg);
};

const ::mc::comm::Attributes&
Primitive::_Internal::attributes(const Primitive* msg) {
  return *msg->_impl_.attributes_;
}
Primitive::Primitive(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:mc.comm.Primitive)
}
Primitive::Primitive(const Primitive& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  Primitive* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.attributes_){nullptr}
    , decltype(_impl_.indices_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_attributes()) {
    _this->_impl_.attributes_ = new ::mc::comm::Attributes(*from._impl_.attributes_);
  }
  _this->_impl_.indices_ = from._impl_.indices_;
  // @@protoc_insertion_point(copy_constructor:mc.comm.Primitive)
}

inline void Primitive::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.attributes_){nullptr}
    , decltype(_impl_.indices_){0}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

Primitive::~Primitive() {
  // @@protoc_insertion_point(destructor:mc.comm.Primitive)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void Primitive::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete _impl_.attributes_;
}

void Primitive::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void Primitive::Clear() {
// @@protoc_insertion_point(message_clear_start:mc.comm.Primitive)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaForAllocation() == nullptr && _impl_.attributes_ != nullptr) {
    delete _impl_.attributes_;
  }
  _impl_.attributes_ = nullptr;
  _impl_.indices_ = 0;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Primitive::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // int32 indices = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _impl_.indices_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .mc.comm.Attributes attributes = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_attributes(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* Primitive::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:mc.comm.Primitive)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 indices = 1;
  if (this->_internal_indices() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(1, this->_internal_indices(), target);
  }

  // .mc.comm.Attributes attributes = 2;
  if (this->_internal_has_attributes()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, _Internal::attributes(this),
        _Internal::attributes(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:mc.comm.Primitive)
  return target;
}

size_t Primitive::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:mc.comm.Primitive)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .mc.comm.Attributes attributes = 2;
  if (this->_internal_has_attributes()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.attributes_);
  }

  // int32 indices = 1;
  if (this->_internal_indices() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_indices());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData Primitive::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    Primitive::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*Primitive::GetClassData() const { return &_class_data_; }


void Primitive::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<Primitive*>(&to_msg);
  auto& from = static_cast<const Primitive&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:mc.comm.Primitive)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_attributes()) {
    _this->_internal_mutable_attributes()->::mc::comm::Attributes::MergeFrom(
        from._internal_attributes());
  }
  if (from._internal_indices() != 0) {
    _this->_internal_set_indices(from._internal_indices());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void Primitive::CopyFrom(const Primitive& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:mc.comm.Primitive)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Primitive::IsInitialized() const {
  return true;
}

void Primitive::InternalSwap(Primitive* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(Primitive, _impl_.indices_)
      + sizeof(Primitive::_impl_.indices_)
      - PROTOBUF_FIELD_OFFSET(Primitive, _impl_.attributes_)>(
          reinterpret_cast<char*>(&_impl_.attributes_),
          reinterpret_cast<char*>(&other->_impl_.attributes_));
}

::PROTOBUF_NAMESPACE_ID::Metadata Primitive::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_mc_2fcomm_2fgltf_2eproto_getter, &descriptor_table_mc_2fcomm_2fgltf_2eproto_once,
      file_level_metadata_mc_2fcomm_2fgltf_2eproto[3]);
}

// ===================================================================

class Mesh::_Internal {
 public:
};

Mesh::Mesh(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:mc.comm.Mesh)
}
Mesh::Mesh(const Mesh& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  Mesh* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.primitives_){from._impl_.primitives_}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:mc.comm.Mesh)
}

inline void Mesh::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.primitives_){arena}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

Mesh::~Mesh() {
  // @@protoc_insertion_point(destructor:mc.comm.Mesh)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void Mesh::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.primitives_.~RepeatedPtrField();
}

void Mesh::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void Mesh::Clear() {
// @@protoc_insertion_point(message_clear_start:mc.comm.Mesh)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.primitives_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Mesh::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // repeated .mc.comm.Primitive primitives = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_primitives(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* Mesh::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:mc.comm.Mesh)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .mc.comm.Primitive primitives = 1;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_primitives_size()); i < n; i++) {
    const auto& repfield = this->_internal_primitives(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(1, repfield, repfield.GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:mc.comm.Mesh)
  return target;
}

size_t Mesh::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:mc.comm.Mesh)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .mc.comm.Primitive primitives = 1;
  total_size += 1UL * this->_internal_primitives_size();
  for (const auto& msg : this->_impl_.primitives_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData Mesh::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    Mesh::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*Mesh::GetClassData() const { return &_class_data_; }


void Mesh::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<Mesh*>(&to_msg);
  auto& from = static_cast<const Mesh&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:mc.comm.Mesh)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.primitives_.MergeFrom(from._impl_.primitives_);
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void Mesh::CopyFrom(const Mesh& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:mc.comm.Mesh)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Mesh::IsInitialized() const {
  return true;
}

void Mesh::InternalSwap(Mesh* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.primitives_.InternalSwap(&other->_impl_.primitives_);
}

::PROTOBUF_NAMESPACE_ID::Metadata Mesh::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_mc_2fcomm_2fgltf_2eproto_getter, &descriptor_table_mc_2fcomm_2fgltf_2eproto_once,
      file_level_metadata_mc_2fcomm_2fgltf_2eproto[4]);
}

// ===================================================================

class Texture::_Internal {
 public:
};

Texture::Texture(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:mc.comm.Texture)
}
Texture::Texture(const Texture& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  Texture* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.sampler_){}
    , decltype(_impl_.source_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&_impl_.sampler_, &from._impl_.sampler_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.source_) -
    reinterpret_cast<char*>(&_impl_.sampler_)) + sizeof(_impl_.source_));
  // @@protoc_insertion_point(copy_constructor:mc.comm.Texture)
}

inline void Texture::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.sampler_){0}
    , decltype(_impl_.source_){0}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

Texture::~Texture() {
  // @@protoc_insertion_point(destructor:mc.comm.Texture)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void Texture::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void Texture::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void Texture::Clear() {
// @@protoc_insertion_point(message_clear_start:mc.comm.Texture)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&_impl_.sampler_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&_impl_.source_) -
      reinterpret_cast<char*>(&_impl_.sampler_)) + sizeof(_impl_.source_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Texture::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // int32 sampler = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _impl_.sampler_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int32 source = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _impl_.source_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* Texture::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:mc.comm.Texture)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 sampler = 1;
  if (this->_internal_sampler() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(1, this->_internal_sampler(), target);
  }

  // int32 source = 2;
  if (this->_internal_source() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(2, this->_internal_source(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:mc.comm.Texture)
  return target;
}

size_t Texture::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:mc.comm.Texture)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // int32 sampler = 1;
  if (this->_internal_sampler() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_sampler());
  }

  // int32 source = 2;
  if (this->_internal_source() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_source());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData Texture::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    Texture::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*Texture::GetClassData() const { return &_class_data_; }


void Texture::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<Texture*>(&to_msg);
  auto& from = static_cast<const Texture&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:mc.comm.Texture)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_sampler() != 0) {
    _this->_internal_set_sampler(from._internal_sampler());
  }
  if (from._internal_source() != 0) {
    _this->_internal_set_source(from._internal_source());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void Texture::CopyFrom(const Texture& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:mc.comm.Texture)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Texture::IsInitialized() const {
  return true;
}

void Texture::InternalSwap(Texture* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(Texture, _impl_.source_)
      + sizeof(Texture::_impl_.source_)
      - PROTOBUF_FIELD_OFFSET(Texture, _impl_.sampler_)>(
          reinterpret_cast<char*>(&_impl_.sampler_),
          reinterpret_cast<char*>(&other->_impl_.sampler_));
}

::PROTOBUF_NAMESPACE_ID::Metadata Texture::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_mc_2fcomm_2fgltf_2eproto_getter, &descriptor_table_mc_2fcomm_2fgltf_2eproto_once,
      file_level_metadata_mc_2fcomm_2fgltf_2eproto[5]);
}

// ===================================================================

class Image::_Internal {
 public:
};

Image::Image(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:mc.comm.Image)
}
Image::Image(const Image& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  Image* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.uri_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.uri_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.uri_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_uri().empty()) {
    _this->_impl_.uri_.Set(from._internal_uri(), 
      _this->GetArenaForAllocation());
  }
  // @@protoc_insertion_point(copy_constructor:mc.comm.Image)
}

inline void Image::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.uri_){}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.uri_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.uri_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

Image::~Image() {
  // @@protoc_insertion_point(destructor:mc.comm.Image)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void Image::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.uri_.Destroy();
}

void Image::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void Image::Clear() {
// @@protoc_insertion_point(message_clear_start:mc.comm.Image)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.uri_.ClearToEmpty();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Image::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string uri = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_uri();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "mc.comm.Image.uri"));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* Image::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:mc.comm.Image)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string uri = 1;
  if (!this->_internal_uri().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_uri().data(), static_cast<int>(this->_internal_uri().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "mc.comm.Image.uri");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_uri(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:mc.comm.Image)
  return target;
}

size_t Image::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:mc.comm.Image)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string uri = 1;
  if (!this->_internal_uri().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_uri());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData Image::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    Image::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*Image::GetClassData() const { return &_class_data_; }


void Image::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<Image*>(&to_msg);
  auto& from = static_cast<const Image&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:mc.comm.Image)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_uri().empty()) {
    _this->_internal_set_uri(from._internal_uri());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void Image::CopyFrom(const Image& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:mc.comm.Image)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Image::IsInitialized() const {
  return true;
}

void Image::InternalSwap(Image* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.uri_, lhs_arena,
      &other->_impl_.uri_, rhs_arena
  );
}

::PROTOBUF_NAMESPACE_ID::Metadata Image::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_mc_2fcomm_2fgltf_2eproto_getter, &descriptor_table_mc_2fcomm_2fgltf_2eproto_once,
      file_level_metadata_mc_2fcomm_2fgltf_2eproto[6]);
}

// ===================================================================

class Sampler::_Internal {
 public:
};

Sampler::Sampler(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:mc.comm.Sampler)
}
Sampler::Sampler(const Sampler& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  Sampler* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.magfilter_){}
    , decltype(_impl_.minfilter_){}
    , decltype(_impl_.wraps_){}
    , decltype(_impl_.wrapt_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&_impl_.magfilter_, &from._impl_.magfilter_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.wrapt_) -
    reinterpret_cast<char*>(&_impl_.magfilter_)) + sizeof(_impl_.wrapt_));
  // @@protoc_insertion_point(copy_constructor:mc.comm.Sampler)
}

inline void Sampler::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.magfilter_){0}
    , decltype(_impl_.minfilter_){0}
    , decltype(_impl_.wraps_){0}
    , decltype(_impl_.wrapt_){0}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

Sampler::~Sampler() {
  // @@protoc_insertion_point(destructor:mc.comm.Sampler)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void Sampler::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void Sampler::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void Sampler::Clear() {
// @@protoc_insertion_point(message_clear_start:mc.comm.Sampler)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&_impl_.magfilter_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&_impl_.wrapt_) -
      reinterpret_cast<char*>(&_impl_.magfilter_)) + sizeof(_impl_.wrapt_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Sampler::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // int32 magFilter = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _impl_.magfilter_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int32 minFilter = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _impl_.minfilter_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int32 wrapS = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          _impl_.wraps_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int32 wrapT = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 32)) {
          _impl_.wrapt_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* Sampler::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:mc.comm.Sampler)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 magFilter = 1;
  if (this->_internal_magfilter() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(1, this->_internal_magfilter(), target);
  }

  // int32 minFilter = 2;
  if (this->_internal_minfilter() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(2, this->_internal_minfilter(), target);
  }

  // int32 wrapS = 3;
  if (this->_internal_wraps() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(3, this->_internal_wraps(), target);
  }

  // int32 wrapT = 4;
  if (this->_internal_wrapt() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(4, this->_internal_wrapt(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:mc.comm.Sampler)
  return target;
}

size_t Sampler::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:mc.comm.Sampler)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // int32 magFilter = 1;
  if (this->_internal_magfilter() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_magfilter());
  }

  // int32 minFilter = 2;
  if (this->_internal_minfilter() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_minfilter());
  }

  // int32 wrapS = 3;
  if (this->_internal_wraps() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_wraps());
  }

  // int32 wrapT = 4;
  if (this->_internal_wrapt() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_wrapt());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData Sampler::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    Sampler::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*Sampler::GetClassData() const { return &_class_data_; }


void Sampler::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<Sampler*>(&to_msg);
  auto& from = static_cast<const Sampler&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:mc.comm.Sampler)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_magfilter() != 0) {
    _this->_internal_set_magfilter(from._internal_magfilter());
  }
  if (from._internal_minfilter() != 0) {
    _this->_internal_set_minfilter(from._internal_minfilter());
  }
  if (from._internal_wraps() != 0) {
    _this->_internal_set_wraps(from._internal_wraps());
  }
  if (from._internal_wrapt() != 0) {
    _this->_internal_set_wrapt(from._internal_wrapt());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void Sampler::CopyFrom(const Sampler& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:mc.comm.Sampler)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Sampler::IsInitialized() const {
  return true;
}

void Sampler::InternalSwap(Sampler* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(Sampler, _impl_.wrapt_)
      + sizeof(Sampler::_impl_.wrapt_)
      - PROTOBUF_FIELD_OFFSET(Sampler, _impl_.magfilter_)>(
          reinterpret_cast<char*>(&_impl_.magfilter_),
          reinterpret_cast<char*>(&other->_impl_.magfilter_));
}

::PROTOBUF_NAMESPACE_ID::Metadata Sampler::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_mc_2fcomm_2fgltf_2eproto_getter, &descriptor_table_mc_2fcomm_2fgltf_2eproto_once,
      file_level_metadata_mc_2fcomm_2fgltf_2eproto[7]);
}

// ===================================================================

class Buffer::_Internal {
 public:
};

Buffer::Buffer(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:mc.comm.Buffer)
}
Buffer::Buffer(const Buffer& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  Buffer* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.uri_){}
    , decltype(_impl_.bytelength_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.uri_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.uri_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_uri().empty()) {
    _this->_impl_.uri_.Set(from._internal_uri(), 
      _this->GetArenaForAllocation());
  }
  _this->_impl_.bytelength_ = from._impl_.bytelength_;
  // @@protoc_insertion_point(copy_constructor:mc.comm.Buffer)
}

inline void Buffer::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.uri_){}
    , decltype(_impl_.bytelength_){0}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.uri_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.uri_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

Buffer::~Buffer() {
  // @@protoc_insertion_point(destructor:mc.comm.Buffer)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void Buffer::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.uri_.Destroy();
}

void Buffer::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void Buffer::Clear() {
// @@protoc_insertion_point(message_clear_start:mc.comm.Buffer)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.uri_.ClearToEmpty();
  _impl_.bytelength_ = 0;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Buffer::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string uri = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_uri();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "mc.comm.Buffer.uri"));
        } else
          goto handle_unusual;
        continue;
      // int32 byteLength = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _impl_.bytelength_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* Buffer::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:mc.comm.Buffer)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string uri = 1;
  if (!this->_internal_uri().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_uri().data(), static_cast<int>(this->_internal_uri().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "mc.comm.Buffer.uri");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_uri(), target);
  }

  // int32 byteLength = 2;
  if (this->_internal_bytelength() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(2, this->_internal_bytelength(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:mc.comm.Buffer)
  return target;
}

size_t Buffer::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:mc.comm.Buffer)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string uri = 1;
  if (!this->_internal_uri().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_uri());
  }

  // int32 byteLength = 2;
  if (this->_internal_bytelength() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_bytelength());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData Buffer::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    Buffer::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*Buffer::GetClassData() const { return &_class_data_; }


void Buffer::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<Buffer*>(&to_msg);
  auto& from = static_cast<const Buffer&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:mc.comm.Buffer)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_uri().empty()) {
    _this->_internal_set_uri(from._internal_uri());
  }
  if (from._internal_bytelength() != 0) {
    _this->_internal_set_bytelength(from._internal_bytelength());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void Buffer::CopyFrom(const Buffer& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:mc.comm.Buffer)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Buffer::IsInitialized() const {
  return true;
}

void Buffer::InternalSwap(Buffer* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.uri_, lhs_arena,
      &other->_impl_.uri_, rhs_arena
  );
  swap(_impl_.bytelength_, other->_impl_.bytelength_);
}

::PROTOBUF_NAMESPACE_ID::Metadata Buffer::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_mc_2fcomm_2fgltf_2eproto_getter, &descriptor_table_mc_2fcomm_2fgltf_2eproto_once,
      file_level_metadata_mc_2fcomm_2fgltf_2eproto[8]);
}

// ===================================================================

class BufferView::_Internal {
 public:
};

BufferView::BufferView(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:mc.comm.BufferView)
}
BufferView::BufferView(const BufferView& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  BufferView* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.buffer_){}
    , decltype(_impl_.byteoffset_){}
    , decltype(_impl_.bytelength_){}
    , decltype(_impl_.bytestride_){}
    , decltype(_impl_.target_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&_impl_.buffer_, &from._impl_.buffer_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.target_) -
    reinterpret_cast<char*>(&_impl_.buffer_)) + sizeof(_impl_.target_));
  // @@protoc_insertion_point(copy_constructor:mc.comm.BufferView)
}

inline void BufferView::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.buffer_){0}
    , decltype(_impl_.byteoffset_){0}
    , decltype(_impl_.bytelength_){0}
    , decltype(_impl_.bytestride_){0}
    , decltype(_impl_.target_){0}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

BufferView::~BufferView() {
  // @@protoc_insertion_point(destructor:mc.comm.BufferView)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void BufferView::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void BufferView::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void BufferView::Clear() {
// @@protoc_insertion_point(message_clear_start:mc.comm.BufferView)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&_impl_.buffer_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&_impl_.target_) -
      reinterpret_cast<char*>(&_impl_.buffer_)) + sizeof(_impl_.target_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* BufferView::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // int32 buffer = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _impl_.buffer_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int32 byteOffset = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _impl_.byteoffset_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int32 byteLength = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          _impl_.bytelength_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int32 byteStride = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 32)) {
          _impl_.bytestride_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int32 target = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 40)) {
          _impl_.target_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* BufferView::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:mc.comm.BufferView)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 buffer = 1;
  if (this->_internal_buffer() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(1, this->_internal_buffer(), target);
  }

  // int32 byteOffset = 2;
  if (this->_internal_byteoffset() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(2, this->_internal_byteoffset(), target);
  }

  // int32 byteLength = 3;
  if (this->_internal_bytelength() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(3, this->_internal_bytelength(), target);
  }

  // int32 byteStride = 4;
  if (this->_internal_bytestride() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(4, this->_internal_bytestride(), target);
  }

  // int32 target = 5;
  if (this->_internal_target() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(5, this->_internal_target(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:mc.comm.BufferView)
  return target;
}

size_t BufferView::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:mc.comm.BufferView)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // int32 buffer = 1;
  if (this->_internal_buffer() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_buffer());
  }

  // int32 byteOffset = 2;
  if (this->_internal_byteoffset() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_byteoffset());
  }

  // int32 byteLength = 3;
  if (this->_internal_bytelength() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_bytelength());
  }

  // int32 byteStride = 4;
  if (this->_internal_bytestride() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_bytestride());
  }

  // int32 target = 5;
  if (this->_internal_target() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_target());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData BufferView::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    BufferView::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*BufferView::GetClassData() const { return &_class_data_; }


void BufferView::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<BufferView*>(&to_msg);
  auto& from = static_cast<const BufferView&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:mc.comm.BufferView)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_buffer() != 0) {
    _this->_internal_set_buffer(from._internal_buffer());
  }
  if (from._internal_byteoffset() != 0) {
    _this->_internal_set_byteoffset(from._internal_byteoffset());
  }
  if (from._internal_bytelength() != 0) {
    _this->_internal_set_bytelength(from._internal_bytelength());
  }
  if (from._internal_bytestride() != 0) {
    _this->_internal_set_bytestride(from._internal_bytestride());
  }
  if (from._internal_target() != 0) {
    _this->_internal_set_target(from._internal_target());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void BufferView::CopyFrom(const BufferView& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:mc.comm.BufferView)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool BufferView::IsInitialized() const {
  return true;
}

void BufferView::InternalSwap(BufferView* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(BufferView, _impl_.target_)
      + sizeof(BufferView::_impl_.target_)
      - PROTOBUF_FIELD_OFFSET(BufferView, _impl_.buffer_)>(
          reinterpret_cast<char*>(&_impl_.buffer_),
          reinterpret_cast<char*>(&other->_impl_.buffer_));
}

::PROTOBUF_NAMESPACE_ID::Metadata BufferView::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_mc_2fcomm_2fgltf_2eproto_getter, &descriptor_table_mc_2fcomm_2fgltf_2eproto_once,
      file_level_metadata_mc_2fcomm_2fgltf_2eproto[9]);
}

// ===================================================================

class Accessor::_Internal {
 public:
};

Accessor::Accessor(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:mc.comm.Accessor)
}
Accessor::Accessor(const Accessor& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  Accessor* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.max_){from._impl_.max_}
    , decltype(_impl_.min_){from._impl_.min_}
    , decltype(_impl_.type_){}
    , decltype(_impl_.bufferview_){}
    , decltype(_impl_.byteoffset_){}
    , decltype(_impl_.componenttype_){}
    , decltype(_impl_.count_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.type_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.type_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_type().empty()) {
    _this->_impl_.type_.Set(from._internal_type(), 
      _this->GetArenaForAllocation());
  }
  ::memcpy(&_impl_.bufferview_, &from._impl_.bufferview_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.count_) -
    reinterpret_cast<char*>(&_impl_.bufferview_)) + sizeof(_impl_.count_));
  // @@protoc_insertion_point(copy_constructor:mc.comm.Accessor)
}

inline void Accessor::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.max_){arena}
    , decltype(_impl_.min_){arena}
    , decltype(_impl_.type_){}
    , decltype(_impl_.bufferview_){0}
    , decltype(_impl_.byteoffset_){0}
    , decltype(_impl_.componenttype_){0}
    , decltype(_impl_.count_){0}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.type_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.type_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

Accessor::~Accessor() {
  // @@protoc_insertion_point(destructor:mc.comm.Accessor)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void Accessor::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.max_.~RepeatedField();
  _impl_.min_.~RepeatedField();
  _impl_.type_.Destroy();
}

void Accessor::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void Accessor::Clear() {
// @@protoc_insertion_point(message_clear_start:mc.comm.Accessor)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.max_.Clear();
  _impl_.min_.Clear();
  _impl_.type_.ClearToEmpty();
  ::memset(&_impl_.bufferview_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&_impl_.count_) -
      reinterpret_cast<char*>(&_impl_.bufferview_)) + sizeof(_impl_.count_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Accessor::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // int32 bufferView = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _impl_.bufferview_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int32 byteOffset = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _impl_.byteoffset_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int32 componentType = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          _impl_.componenttype_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int32 count = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 32)) {
          _impl_.count_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string type = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 42)) {
          auto str = _internal_mutable_type();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "mc.comm.Accessor.type"));
        } else
          goto handle_unusual;
        continue;
      // repeated float max = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 50)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedFloatParser(_internal_mutable_max(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<uint8_t>(tag) == 53) {
          _internal_add_max(::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr));
          ptr += sizeof(float);
        } else
          goto handle_unusual;
        continue;
      // repeated float min = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 58)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedFloatParser(_internal_mutable_min(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<uint8_t>(tag) == 61) {
          _internal_add_min(::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr));
          ptr += sizeof(float);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* Accessor::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:mc.comm.Accessor)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 bufferView = 1;
  if (this->_internal_bufferview() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(1, this->_internal_bufferview(), target);
  }

  // int32 byteOffset = 2;
  if (this->_internal_byteoffset() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(2, this->_internal_byteoffset(), target);
  }

  // int32 componentType = 3;
  if (this->_internal_componenttype() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(3, this->_internal_componenttype(), target);
  }

  // int32 count = 4;
  if (this->_internal_count() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(4, this->_internal_count(), target);
  }

  // string type = 5;
  if (!this->_internal_type().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_type().data(), static_cast<int>(this->_internal_type().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "mc.comm.Accessor.type");
    target = stream->WriteStringMaybeAliased(
        5, this->_internal_type(), target);
  }

  // repeated float max = 6;
  if (this->_internal_max_size() > 0) {
    target = stream->WriteFixedPacked(6, _internal_max(), target);
  }

  // repeated float min = 7;
  if (this->_internal_min_size() > 0) {
    target = stream->WriteFixedPacked(7, _internal_min(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:mc.comm.Accessor)
  return target;
}

size_t Accessor::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:mc.comm.Accessor)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated float max = 6;
  {
    unsigned int count = static_cast<unsigned int>(this->_internal_max_size());
    size_t data_size = 4UL * count;
    if (data_size > 0) {
      total_size += 1 +
        ::_pbi::WireFormatLite::Int32Size(static_cast<int32_t>(data_size));
    }
    total_size += data_size;
  }

  // repeated float min = 7;
  {
    unsigned int count = static_cast<unsigned int>(this->_internal_min_size());
    size_t data_size = 4UL * count;
    if (data_size > 0) {
      total_size += 1 +
        ::_pbi::WireFormatLite::Int32Size(static_cast<int32_t>(data_size));
    }
    total_size += data_size;
  }

  // string type = 5;
  if (!this->_internal_type().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_type());
  }

  // int32 bufferView = 1;
  if (this->_internal_bufferview() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_bufferview());
  }

  // int32 byteOffset = 2;
  if (this->_internal_byteoffset() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_byteoffset());
  }

  // int32 componentType = 3;
  if (this->_internal_componenttype() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_componenttype());
  }

  // int32 count = 4;
  if (this->_internal_count() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_count());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData Accessor::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    Accessor::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*Accessor::GetClassData() const { return &_class_data_; }


void Accessor::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<Accessor*>(&to_msg);
  auto& from = static_cast<const Accessor&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:mc.comm.Accessor)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.max_.MergeFrom(from._impl_.max_);
  _this->_impl_.min_.MergeFrom(from._impl_.min_);
  if (!from._internal_type().empty()) {
    _this->_internal_set_type(from._internal_type());
  }
  if (from._internal_bufferview() != 0) {
    _this->_internal_set_bufferview(from._internal_bufferview());
  }
  if (from._internal_byteoffset() != 0) {
    _this->_internal_set_byteoffset(from._internal_byteoffset());
  }
  if (from._internal_componenttype() != 0) {
    _this->_internal_set_componenttype(from._internal_componenttype());
  }
  if (from._internal_count() != 0) {
    _this->_internal_set_count(from._internal_count());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void Accessor::CopyFrom(const Accessor& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:mc.comm.Accessor)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Accessor::IsInitialized() const {
  return true;
}

void Accessor::InternalSwap(Accessor* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.max_.InternalSwap(&other->_impl_.max_);
  _impl_.min_.InternalSwap(&other->_impl_.min_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.type_, lhs_arena,
      &other->_impl_.type_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(Accessor, _impl_.count_)
      + sizeof(Accessor::_impl_.count_)
      - PROTOBUF_FIELD_OFFSET(Accessor, _impl_.bufferview_)>(
          reinterpret_cast<char*>(&_impl_.bufferview_),
          reinterpret_cast<char*>(&other->_impl_.bufferview_));
}

::PROTOBUF_NAMESPACE_ID::Metadata Accessor::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_mc_2fcomm_2fgltf_2eproto_getter, &descriptor_table_mc_2fcomm_2fgltf_2eproto_once,
      file_level_metadata_mc_2fcomm_2fgltf_2eproto[10]);
}

// ===================================================================

class Asset::_Internal {
 public:
};

Asset::Asset(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:mc.comm.Asset)
}
Asset::Asset(const Asset& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  Asset* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.version_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.version_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.version_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_version().empty()) {
    _this->_impl_.version_.Set(from._internal_version(), 
      _this->GetArenaForAllocation());
  }
  // @@protoc_insertion_point(copy_constructor:mc.comm.Asset)
}

inline void Asset::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.version_){}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.version_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.version_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

Asset::~Asset() {
  // @@protoc_insertion_point(destructor:mc.comm.Asset)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void Asset::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.version_.Destroy();
}

void Asset::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void Asset::Clear() {
// @@protoc_insertion_point(message_clear_start:mc.comm.Asset)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.version_.ClearToEmpty();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Asset::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string version = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_version();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "mc.comm.Asset.version"));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* Asset::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:mc.comm.Asset)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string version = 1;
  if (!this->_internal_version().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_version().data(), static_cast<int>(this->_internal_version().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "mc.comm.Asset.version");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_version(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:mc.comm.Asset)
  return target;
}

size_t Asset::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:mc.comm.Asset)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string version = 1;
  if (!this->_internal_version().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_version());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData Asset::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    Asset::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*Asset::GetClassData() const { return &_class_data_; }


void Asset::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<Asset*>(&to_msg);
  auto& from = static_cast<const Asset&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:mc.comm.Asset)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_version().empty()) {
    _this->_internal_set_version(from._internal_version());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void Asset::CopyFrom(const Asset& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:mc.comm.Asset)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Asset::IsInitialized() const {
  return true;
}

void Asset::InternalSwap(Asset* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.version_, lhs_arena,
      &other->_impl_.version_, rhs_arena
  );
}

::PROTOBUF_NAMESPACE_ID::Metadata Asset::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_mc_2fcomm_2fgltf_2eproto_getter, &descriptor_table_mc_2fcomm_2fgltf_2eproto_once,
      file_level_metadata_mc_2fcomm_2fgltf_2eproto[11]);
}

// ===================================================================

class GLTF::_Internal {
 public:
  static const ::mc::comm::Asset& asset(const GLTF* msg);
};

const ::mc::comm::Asset&
GLTF::_Internal::asset(const GLTF* msg) {
  return *msg->_impl_.asset_;
}
GLTF::GLTF(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:mc.comm.GLTF)
}
GLTF::GLTF(const GLTF& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  GLTF* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.scenes_){from._impl_.scenes_}
    , decltype(_impl_.nodes_){from._impl_.nodes_}
    , decltype(_impl_.meshes_){from._impl_.meshes_}
    , decltype(_impl_.textures_){from._impl_.textures_}
    , decltype(_impl_.images_){from._impl_.images_}
    , decltype(_impl_.samplers_){from._impl_.samplers_}
    , decltype(_impl_.buffers_){from._impl_.buffers_}
    , decltype(_impl_.bufferviews_){from._impl_.bufferviews_}
    , decltype(_impl_.accessors_){from._impl_.accessors_}
    , decltype(_impl_.asset_){nullptr}
    , decltype(_impl_.scene_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_asset()) {
    _this->_impl_.asset_ = new ::mc::comm::Asset(*from._impl_.asset_);
  }
  _this->_impl_.scene_ = from._impl_.scene_;
  // @@protoc_insertion_point(copy_constructor:mc.comm.GLTF)
}

inline void GLTF::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.scenes_){arena}
    , decltype(_impl_.nodes_){arena}
    , decltype(_impl_.meshes_){arena}
    , decltype(_impl_.textures_){arena}
    , decltype(_impl_.images_){arena}
    , decltype(_impl_.samplers_){arena}
    , decltype(_impl_.buffers_){arena}
    , decltype(_impl_.bufferviews_){arena}
    , decltype(_impl_.accessors_){arena}
    , decltype(_impl_.asset_){nullptr}
    , decltype(_impl_.scene_){0}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

GLTF::~GLTF() {
  // @@protoc_insertion_point(destructor:mc.comm.GLTF)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void GLTF::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.scenes_.~RepeatedPtrField();
  _impl_.nodes_.~RepeatedPtrField();
  _impl_.meshes_.~RepeatedPtrField();
  _impl_.textures_.~RepeatedPtrField();
  _impl_.images_.~RepeatedPtrField();
  _impl_.samplers_.~RepeatedPtrField();
  _impl_.buffers_.~RepeatedPtrField();
  _impl_.bufferviews_.~RepeatedPtrField();
  _impl_.accessors_.~RepeatedPtrField();
  if (this != internal_default_instance()) delete _impl_.asset_;
}

void GLTF::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void GLTF::Clear() {
// @@protoc_insertion_point(message_clear_start:mc.comm.GLTF)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.scenes_.Clear();
  _impl_.nodes_.Clear();
  _impl_.meshes_.Clear();
  _impl_.textures_.Clear();
  _impl_.images_.Clear();
  _impl_.samplers_.Clear();
  _impl_.buffers_.Clear();
  _impl_.bufferviews_.Clear();
  _impl_.accessors_.Clear();
  if (GetArenaForAllocation() == nullptr && _impl_.asset_ != nullptr) {
    delete _impl_.asset_;
  }
  _impl_.asset_ = nullptr;
  _impl_.scene_ = 0;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* GLTF::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // int32 scene = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _impl_.scene_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated .mc.comm.Scene scenes = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_scenes(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else
          goto handle_unusual;
        continue;
      // repeated .mc.comm.Node nodes = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_nodes(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<26>(ptr));
        } else
          goto handle_unusual;
        continue;
      // repeated .mc.comm.Mesh meshes = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_meshes(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<34>(ptr));
        } else
          goto handle_unusual;
        continue;
      // repeated .mc.comm.Texture textures = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 42)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_textures(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<42>(ptr));
        } else
          goto handle_unusual;
        continue;
      // repeated .mc.comm.Image images = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 50)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_images(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<50>(ptr));
        } else
          goto handle_unusual;
        continue;
      // repeated .mc.comm.Sampler samplers = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 58)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_samplers(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<58>(ptr));
        } else
          goto handle_unusual;
        continue;
      // repeated .mc.comm.Buffer buffers = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 66)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_buffers(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<66>(ptr));
        } else
          goto handle_unusual;
        continue;
      // repeated .mc.comm.BufferView bufferViews = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 74)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_bufferviews(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<74>(ptr));
        } else
          goto handle_unusual;
        continue;
      // repeated .mc.comm.Accessor accessors = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 82)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_accessors(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<82>(ptr));
        } else
          goto handle_unusual;
        continue;
      // .mc.comm.Asset asset = 11;
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 90)) {
          ptr = ctx->ParseMessage(_internal_mutable_asset(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* GLTF::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:mc.comm.GLTF)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 scene = 1;
  if (this->_internal_scene() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(1, this->_internal_scene(), target);
  }

  // repeated .mc.comm.Scene scenes = 2;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_scenes_size()); i < n; i++) {
    const auto& repfield = this->_internal_scenes(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(2, repfield, repfield.GetCachedSize(), target, stream);
  }

  // repeated .mc.comm.Node nodes = 3;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_nodes_size()); i < n; i++) {
    const auto& repfield = this->_internal_nodes(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(3, repfield, repfield.GetCachedSize(), target, stream);
  }

  // repeated .mc.comm.Mesh meshes = 4;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_meshes_size()); i < n; i++) {
    const auto& repfield = this->_internal_meshes(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(4, repfield, repfield.GetCachedSize(), target, stream);
  }

  // repeated .mc.comm.Texture textures = 5;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_textures_size()); i < n; i++) {
    const auto& repfield = this->_internal_textures(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(5, repfield, repfield.GetCachedSize(), target, stream);
  }

  // repeated .mc.comm.Image images = 6;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_images_size()); i < n; i++) {
    const auto& repfield = this->_internal_images(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(6, repfield, repfield.GetCachedSize(), target, stream);
  }

  // repeated .mc.comm.Sampler samplers = 7;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_samplers_size()); i < n; i++) {
    const auto& repfield = this->_internal_samplers(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(7, repfield, repfield.GetCachedSize(), target, stream);
  }

  // repeated .mc.comm.Buffer buffers = 8;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_buffers_size()); i < n; i++) {
    const auto& repfield = this->_internal_buffers(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(8, repfield, repfield.GetCachedSize(), target, stream);
  }

  // repeated .mc.comm.BufferView bufferViews = 9;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_bufferviews_size()); i < n; i++) {
    const auto& repfield = this->_internal_bufferviews(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(9, repfield, repfield.GetCachedSize(), target, stream);
  }

  // repeated .mc.comm.Accessor accessors = 10;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_accessors_size()); i < n; i++) {
    const auto& repfield = this->_internal_accessors(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(10, repfield, repfield.GetCachedSize(), target, stream);
  }

  // .mc.comm.Asset asset = 11;
  if (this->_internal_has_asset()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(11, _Internal::asset(this),
        _Internal::asset(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:mc.comm.GLTF)
  return target;
}

size_t GLTF::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:mc.comm.GLTF)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .mc.comm.Scene scenes = 2;
  total_size += 1UL * this->_internal_scenes_size();
  for (const auto& msg : this->_impl_.scenes_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .mc.comm.Node nodes = 3;
  total_size += 1UL * this->_internal_nodes_size();
  for (const auto& msg : this->_impl_.nodes_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .mc.comm.Mesh meshes = 4;
  total_size += 1UL * this->_internal_meshes_size();
  for (const auto& msg : this->_impl_.meshes_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .mc.comm.Texture textures = 5;
  total_size += 1UL * this->_internal_textures_size();
  for (const auto& msg : this->_impl_.textures_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .mc.comm.Image images = 6;
  total_size += 1UL * this->_internal_images_size();
  for (const auto& msg : this->_impl_.images_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .mc.comm.Sampler samplers = 7;
  total_size += 1UL * this->_internal_samplers_size();
  for (const auto& msg : this->_impl_.samplers_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .mc.comm.Buffer buffers = 8;
  total_size += 1UL * this->_internal_buffers_size();
  for (const auto& msg : this->_impl_.buffers_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .mc.comm.BufferView bufferViews = 9;
  total_size += 1UL * this->_internal_bufferviews_size();
  for (const auto& msg : this->_impl_.bufferviews_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .mc.comm.Accessor accessors = 10;
  total_size += 1UL * this->_internal_accessors_size();
  for (const auto& msg : this->_impl_.accessors_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // .mc.comm.Asset asset = 11;
  if (this->_internal_has_asset()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.asset_);
  }

  // int32 scene = 1;
  if (this->_internal_scene() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_scene());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData GLTF::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    GLTF::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GLTF::GetClassData() const { return &_class_data_; }


void GLTF::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<GLTF*>(&to_msg);
  auto& from = static_cast<const GLTF&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:mc.comm.GLTF)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.scenes_.MergeFrom(from._impl_.scenes_);
  _this->_impl_.nodes_.MergeFrom(from._impl_.nodes_);
  _this->_impl_.meshes_.MergeFrom(from._impl_.meshes_);
  _this->_impl_.textures_.MergeFrom(from._impl_.textures_);
  _this->_impl_.images_.MergeFrom(from._impl_.images_);
  _this->_impl_.samplers_.MergeFrom(from._impl_.samplers_);
  _this->_impl_.buffers_.MergeFrom(from._impl_.buffers_);
  _this->_impl_.bufferviews_.MergeFrom(from._impl_.bufferviews_);
  _this->_impl_.accessors_.MergeFrom(from._impl_.accessors_);
  if (from._internal_has_asset()) {
    _this->_internal_mutable_asset()->::mc::comm::Asset::MergeFrom(
        from._internal_asset());
  }
  if (from._internal_scene() != 0) {
    _this->_internal_set_scene(from._internal_scene());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void GLTF::CopyFrom(const GLTF& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:mc.comm.GLTF)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GLTF::IsInitialized() const {
  return true;
}

void GLTF::InternalSwap(GLTF* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.scenes_.InternalSwap(&other->_impl_.scenes_);
  _impl_.nodes_.InternalSwap(&other->_impl_.nodes_);
  _impl_.meshes_.InternalSwap(&other->_impl_.meshes_);
  _impl_.textures_.InternalSwap(&other->_impl_.textures_);
  _impl_.images_.InternalSwap(&other->_impl_.images_);
  _impl_.samplers_.InternalSwap(&other->_impl_.samplers_);
  _impl_.buffers_.InternalSwap(&other->_impl_.buffers_);
  _impl_.bufferviews_.InternalSwap(&other->_impl_.bufferviews_);
  _impl_.accessors_.InternalSwap(&other->_impl_.accessors_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(GLTF, _impl_.scene_)
      + sizeof(GLTF::_impl_.scene_)
      - PROTOBUF_FIELD_OFFSET(GLTF, _impl_.asset_)>(
          reinterpret_cast<char*>(&_impl_.asset_),
          reinterpret_cast<char*>(&other->_impl_.asset_));
}

::PROTOBUF_NAMESPACE_ID::Metadata GLTF::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_mc_2fcomm_2fgltf_2eproto_getter, &descriptor_table_mc_2fcomm_2fgltf_2eproto_once,
      file_level_metadata_mc_2fcomm_2fgltf_2eproto[12]);
}

// @@protoc_insertion_point(namespace_scope)
}  // namespace comm
}  // namespace mc
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::mc::comm::Scene*
Arena::CreateMaybeMessage< ::mc::comm::Scene >(Arena* arena) {
  return Arena::CreateMessageInternal< ::mc::comm::Scene >(arena);
}
template<> PROTOBUF_NOINLINE ::mc::comm::Node*
Arena::CreateMaybeMessage< ::mc::comm::Node >(Arena* arena) {
  return Arena::CreateMessageInternal< ::mc::comm::Node >(arena);
}
template<> PROTOBUF_NOINLINE ::mc::comm::Attributes*
Arena::CreateMaybeMessage< ::mc::comm::Attributes >(Arena* arena) {
  return Arena::CreateMessageInternal< ::mc::comm::Attributes >(arena);
}
template<> PROTOBUF_NOINLINE ::mc::comm::Primitive*
Arena::CreateMaybeMessage< ::mc::comm::Primitive >(Arena* arena) {
  return Arena::CreateMessageInternal< ::mc::comm::Primitive >(arena);
}
template<> PROTOBUF_NOINLINE ::mc::comm::Mesh*
Arena::CreateMaybeMessage< ::mc::comm::Mesh >(Arena* arena) {
  return Arena::CreateMessageInternal< ::mc::comm::Mesh >(arena);
}
template<> PROTOBUF_NOINLINE ::mc::comm::Texture*
Arena::CreateMaybeMessage< ::mc::comm::Texture >(Arena* arena) {
  return Arena::CreateMessageInternal< ::mc::comm::Texture >(arena);
}
template<> PROTOBUF_NOINLINE ::mc::comm::Image*
Arena::CreateMaybeMessage< ::mc::comm::Image >(Arena* arena) {
  return Arena::CreateMessageInternal< ::mc::comm::Image >(arena);
}
template<> PROTOBUF_NOINLINE ::mc::comm::Sampler*
Arena::CreateMaybeMessage< ::mc::comm::Sampler >(Arena* arena) {
  return Arena::CreateMessageInternal< ::mc::comm::Sampler >(arena);
}
template<> PROTOBUF_NOINLINE ::mc::comm::Buffer*
Arena::CreateMaybeMessage< ::mc::comm::Buffer >(Arena* arena) {
  return Arena::CreateMessageInternal< ::mc::comm::Buffer >(arena);
}
template<> PROTOBUF_NOINLINE ::mc::comm::BufferView*
Arena::CreateMaybeMessage< ::mc::comm::BufferView >(Arena* arena) {
  return Arena::CreateMessageInternal< ::mc::comm::BufferView >(arena);
}
template<> PROTOBUF_NOINLINE ::mc::comm::Accessor*
Arena::CreateMaybeMessage< ::mc::comm::Accessor >(Arena* arena) {
  return Arena::CreateMessageInternal< ::mc::comm::Accessor >(arena);
}
template<> PROTOBUF_NOINLINE ::mc::comm::Asset*
Arena::CreateMaybeMessage< ::mc::comm::Asset >(Arena* arena) {
  return Arena::CreateMessageInternal< ::mc::comm::Asset >(arena);
}
template<> PROTOBUF_NOINLINE ::mc::comm::GLTF*
Arena::CreateMaybeMessage< ::mc::comm::GLTF >(Arena* arena) {
  return Arena::CreateMessageInternal< ::mc::comm::GLTF >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
