// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: mc/comm/pbmaterial.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_mc_2fcomm_2fpbmaterial_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_mc_2fcomm_2fpbmaterial_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3021000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3021005 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_mc_2fcomm_2fpbmaterial_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_mc_2fcomm_2fpbmaterial_2eproto {
  static const uint32_t offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_mc_2fcomm_2fpbmaterial_2eproto;
namespace mc {
namespace comm {
class PBMaterial;
struct PBMaterialDefaultTypeInternal;
extern PBMaterialDefaultTypeInternal _PBMaterial_default_instance_;
}  // namespace comm
}  // namespace mc
PROTOBUF_NAMESPACE_OPEN
template<> ::mc::comm::PBMaterial* Arena::CreateMaybeMessage<::mc::comm::PBMaterial>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace mc {
namespace comm {

// ===================================================================

class PBMaterial final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:mc.comm.PBMaterial) */ {
 public:
  inline PBMaterial() : PBMaterial(nullptr) {}
  ~PBMaterial() override;
  explicit PROTOBUF_CONSTEXPR PBMaterial(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  PBMaterial(const PBMaterial& from);
  PBMaterial(PBMaterial&& from) noexcept
    : PBMaterial() {
    *this = ::std::move(from);
  }

  inline PBMaterial& operator=(const PBMaterial& from) {
    CopyFrom(from);
    return *this;
  }
  inline PBMaterial& operator=(PBMaterial&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const PBMaterial& default_instance() {
    return *internal_default_instance();
  }
  static inline const PBMaterial* internal_default_instance() {
    return reinterpret_cast<const PBMaterial*>(
               &_PBMaterial_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(PBMaterial& a, PBMaterial& b) {
    a.Swap(&b);
  }
  inline void Swap(PBMaterial* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(PBMaterial* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  PBMaterial* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<PBMaterial>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const PBMaterial& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const PBMaterial& from) {
    PBMaterial::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(PBMaterial* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "mc.comm.PBMaterial";
  }
  protected:
  explicit PBMaterial(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kTextureListFieldNumber = 2,
    kArtLogicFieldNumber = 1,
    kShaderProgramFieldNumber = 3,
  };
  // repeated string texture_list = 2;
  int texture_list_size() const;
  private:
  int _internal_texture_list_size() const;
  public:
  void clear_texture_list();
  const std::string& texture_list(int index) const;
  std::string* mutable_texture_list(int index);
  void set_texture_list(int index, const std::string& value);
  void set_texture_list(int index, std::string&& value);
  void set_texture_list(int index, const char* value);
  void set_texture_list(int index, const char* value, size_t size);
  std::string* add_texture_list();
  void add_texture_list(const std::string& value);
  void add_texture_list(std::string&& value);
  void add_texture_list(const char* value);
  void add_texture_list(const char* value, size_t size);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>& texture_list() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>* mutable_texture_list();
  private:
  const std::string& _internal_texture_list(int index) const;
  std::string* _internal_add_texture_list();
  public:

  // string art_logic = 1;
  void clear_art_logic();
  const std::string& art_logic() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_art_logic(ArgT0&& arg0, ArgT... args);
  std::string* mutable_art_logic();
  PROTOBUF_NODISCARD std::string* release_art_logic();
  void set_allocated_art_logic(std::string* art_logic);
  private:
  const std::string& _internal_art_logic() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_art_logic(const std::string& value);
  std::string* _internal_mutable_art_logic();
  public:

  // string shader_program = 3;
  void clear_shader_program();
  const std::string& shader_program() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_shader_program(ArgT0&& arg0, ArgT... args);
  std::string* mutable_shader_program();
  PROTOBUF_NODISCARD std::string* release_shader_program();
  void set_allocated_shader_program(std::string* shader_program);
  private:
  const std::string& _internal_shader_program() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_shader_program(const std::string& value);
  std::string* _internal_mutable_shader_program();
  public:

  // @@protoc_insertion_point(class_scope:mc.comm.PBMaterial)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string> texture_list_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr art_logic_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr shader_program_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_mc_2fcomm_2fpbmaterial_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// PBMaterial

// string art_logic = 1;
inline void PBMaterial::clear_art_logic() {
  _impl_.art_logic_.ClearToEmpty();
}
inline const std::string& PBMaterial::art_logic() const {
  // @@protoc_insertion_point(field_get:mc.comm.PBMaterial.art_logic)
  return _internal_art_logic();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void PBMaterial::set_art_logic(ArgT0&& arg0, ArgT... args) {
 
 _impl_.art_logic_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:mc.comm.PBMaterial.art_logic)
}
inline std::string* PBMaterial::mutable_art_logic() {
  std::string* _s = _internal_mutable_art_logic();
  // @@protoc_insertion_point(field_mutable:mc.comm.PBMaterial.art_logic)
  return _s;
}
inline const std::string& PBMaterial::_internal_art_logic() const {
  return _impl_.art_logic_.Get();
}
inline void PBMaterial::_internal_set_art_logic(const std::string& value) {
  
  _impl_.art_logic_.Set(value, GetArenaForAllocation());
}
inline std::string* PBMaterial::_internal_mutable_art_logic() {
  
  return _impl_.art_logic_.Mutable(GetArenaForAllocation());
}
inline std::string* PBMaterial::release_art_logic() {
  // @@protoc_insertion_point(field_release:mc.comm.PBMaterial.art_logic)
  return _impl_.art_logic_.Release();
}
inline void PBMaterial::set_allocated_art_logic(std::string* art_logic) {
  if (art_logic != nullptr) {
    
  } else {
    
  }
  _impl_.art_logic_.SetAllocated(art_logic, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.art_logic_.IsDefault()) {
    _impl_.art_logic_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:mc.comm.PBMaterial.art_logic)
}

// repeated string texture_list = 2;
inline int PBMaterial::_internal_texture_list_size() const {
  return _impl_.texture_list_.size();
}
inline int PBMaterial::texture_list_size() const {
  return _internal_texture_list_size();
}
inline void PBMaterial::clear_texture_list() {
  _impl_.texture_list_.Clear();
}
inline std::string* PBMaterial::add_texture_list() {
  std::string* _s = _internal_add_texture_list();
  // @@protoc_insertion_point(field_add_mutable:mc.comm.PBMaterial.texture_list)
  return _s;
}
inline const std::string& PBMaterial::_internal_texture_list(int index) const {
  return _impl_.texture_list_.Get(index);
}
inline const std::string& PBMaterial::texture_list(int index) const {
  // @@protoc_insertion_point(field_get:mc.comm.PBMaterial.texture_list)
  return _internal_texture_list(index);
}
inline std::string* PBMaterial::mutable_texture_list(int index) {
  // @@protoc_insertion_point(field_mutable:mc.comm.PBMaterial.texture_list)
  return _impl_.texture_list_.Mutable(index);
}
inline void PBMaterial::set_texture_list(int index, const std::string& value) {
  _impl_.texture_list_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set:mc.comm.PBMaterial.texture_list)
}
inline void PBMaterial::set_texture_list(int index, std::string&& value) {
  _impl_.texture_list_.Mutable(index)->assign(std::move(value));
  // @@protoc_insertion_point(field_set:mc.comm.PBMaterial.texture_list)
}
inline void PBMaterial::set_texture_list(int index, const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _impl_.texture_list_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:mc.comm.PBMaterial.texture_list)
}
inline void PBMaterial::set_texture_list(int index, const char* value, size_t size) {
  _impl_.texture_list_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:mc.comm.PBMaterial.texture_list)
}
inline std::string* PBMaterial::_internal_add_texture_list() {
  return _impl_.texture_list_.Add();
}
inline void PBMaterial::add_texture_list(const std::string& value) {
  _impl_.texture_list_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:mc.comm.PBMaterial.texture_list)
}
inline void PBMaterial::add_texture_list(std::string&& value) {
  _impl_.texture_list_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:mc.comm.PBMaterial.texture_list)
}
inline void PBMaterial::add_texture_list(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _impl_.texture_list_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:mc.comm.PBMaterial.texture_list)
}
inline void PBMaterial::add_texture_list(const char* value, size_t size) {
  _impl_.texture_list_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:mc.comm.PBMaterial.texture_list)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>&
PBMaterial::texture_list() const {
  // @@protoc_insertion_point(field_list:mc.comm.PBMaterial.texture_list)
  return _impl_.texture_list_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>*
PBMaterial::mutable_texture_list() {
  // @@protoc_insertion_point(field_mutable_list:mc.comm.PBMaterial.texture_list)
  return &_impl_.texture_list_;
}

// string shader_program = 3;
inline void PBMaterial::clear_shader_program() {
  _impl_.shader_program_.ClearToEmpty();
}
inline const std::string& PBMaterial::shader_program() const {
  // @@protoc_insertion_point(field_get:mc.comm.PBMaterial.shader_program)
  return _internal_shader_program();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void PBMaterial::set_shader_program(ArgT0&& arg0, ArgT... args) {
 
 _impl_.shader_program_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:mc.comm.PBMaterial.shader_program)
}
inline std::string* PBMaterial::mutable_shader_program() {
  std::string* _s = _internal_mutable_shader_program();
  // @@protoc_insertion_point(field_mutable:mc.comm.PBMaterial.shader_program)
  return _s;
}
inline const std::string& PBMaterial::_internal_shader_program() const {
  return _impl_.shader_program_.Get();
}
inline void PBMaterial::_internal_set_shader_program(const std::string& value) {
  
  _impl_.shader_program_.Set(value, GetArenaForAllocation());
}
inline std::string* PBMaterial::_internal_mutable_shader_program() {
  
  return _impl_.shader_program_.Mutable(GetArenaForAllocation());
}
inline std::string* PBMaterial::release_shader_program() {
  // @@protoc_insertion_point(field_release:mc.comm.PBMaterial.shader_program)
  return _impl_.shader_program_.Release();
}
inline void PBMaterial::set_allocated_shader_program(std::string* shader_program) {
  if (shader_program != nullptr) {
    
  } else {
    
  }
  _impl_.shader_program_.SetAllocated(shader_program, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.shader_program_.IsDefault()) {
    _impl_.shader_program_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:mc.comm.PBMaterial.shader_program)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__

// @@protoc_insertion_point(namespace_scope)

}  // namespace comm
}  // namespace mc

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_mc_2fcomm_2fpbmaterial_2eproto
