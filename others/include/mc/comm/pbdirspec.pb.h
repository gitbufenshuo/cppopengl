// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: mc/comm/pbdirspec.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_mc_2fcomm_2fpbdirspec_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_mc_2fcomm_2fpbdirspec_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3021000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3021005 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_mc_2fcomm_2fpbdirspec_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_mc_2fcomm_2fpbdirspec_2eproto {
  static const uint32_t offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_mc_2fcomm_2fpbdirspec_2eproto;
namespace mc {
namespace comm {
class PBDirSpec;
struct PBDirSpecDefaultTypeInternal;
extern PBDirSpecDefaultTypeInternal _PBDirSpec_default_instance_;
}  // namespace comm
}  // namespace mc
PROTOBUF_NAMESPACE_OPEN
template<> ::mc::comm::PBDirSpec* Arena::CreateMaybeMessage<::mc::comm::PBDirSpec>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace mc {
namespace comm {

// ===================================================================

class PBDirSpec final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:mc.comm.PBDirSpec) */ {
 public:
  inline PBDirSpec() : PBDirSpec(nullptr) {}
  ~PBDirSpec() override;
  explicit PROTOBUF_CONSTEXPR PBDirSpec(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  PBDirSpec(const PBDirSpec& from);
  PBDirSpec(PBDirSpec&& from) noexcept
    : PBDirSpec() {
    *this = ::std::move(from);
  }

  inline PBDirSpec& operator=(const PBDirSpec& from) {
    CopyFrom(from);
    return *this;
  }
  inline PBDirSpec& operator=(PBDirSpec&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const PBDirSpec& default_instance() {
    return *internal_default_instance();
  }
  static inline const PBDirSpec* internal_default_instance() {
    return reinterpret_cast<const PBDirSpec*>(
               &_PBDirSpec_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(PBDirSpec& a, PBDirSpec& b) {
    a.Swap(&b);
  }
  inline void Swap(PBDirSpec* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(PBDirSpec* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  PBDirSpec* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<PBDirSpec>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const PBDirSpec& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const PBDirSpec& from) {
    PBDirSpec::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(PBDirSpec* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "mc.comm.PBDirSpec";
  }
  protected:
  explicit PBDirSpec(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kImageListFieldNumber = 2,
    kBinBufferListFieldNumber = 3,
    kShaderCodeListFieldNumber = 4,
    kArtLogicListFieldNumber = 5,
    kActLogicListFieldNumber = 6,
    kTextureListFieldNumber = 7,
    kModelListFieldNumber = 8,
    kShaderProgramListFieldNumber = 9,
    kMaterialListFieldNumber = 10,
    kSceneListFieldNumber = 11,
    kNodeListFieldNumber = 12,
    kBaseDirFieldNumber = 1,
  };
  // repeated string image_list = 2;
  int image_list_size() const;
  private:
  int _internal_image_list_size() const;
  public:
  void clear_image_list();
  const std::string& image_list(int index) const;
  std::string* mutable_image_list(int index);
  void set_image_list(int index, const std::string& value);
  void set_image_list(int index, std::string&& value);
  void set_image_list(int index, const char* value);
  void set_image_list(int index, const char* value, size_t size);
  std::string* add_image_list();
  void add_image_list(const std::string& value);
  void add_image_list(std::string&& value);
  void add_image_list(const char* value);
  void add_image_list(const char* value, size_t size);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>& image_list() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>* mutable_image_list();
  private:
  const std::string& _internal_image_list(int index) const;
  std::string* _internal_add_image_list();
  public:

  // repeated string bin_buffer_list = 3;
  int bin_buffer_list_size() const;
  private:
  int _internal_bin_buffer_list_size() const;
  public:
  void clear_bin_buffer_list();
  const std::string& bin_buffer_list(int index) const;
  std::string* mutable_bin_buffer_list(int index);
  void set_bin_buffer_list(int index, const std::string& value);
  void set_bin_buffer_list(int index, std::string&& value);
  void set_bin_buffer_list(int index, const char* value);
  void set_bin_buffer_list(int index, const char* value, size_t size);
  std::string* add_bin_buffer_list();
  void add_bin_buffer_list(const std::string& value);
  void add_bin_buffer_list(std::string&& value);
  void add_bin_buffer_list(const char* value);
  void add_bin_buffer_list(const char* value, size_t size);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>& bin_buffer_list() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>* mutable_bin_buffer_list();
  private:
  const std::string& _internal_bin_buffer_list(int index) const;
  std::string* _internal_add_bin_buffer_list();
  public:

  // repeated string shader_code_list = 4;
  int shader_code_list_size() const;
  private:
  int _internal_shader_code_list_size() const;
  public:
  void clear_shader_code_list();
  const std::string& shader_code_list(int index) const;
  std::string* mutable_shader_code_list(int index);
  void set_shader_code_list(int index, const std::string& value);
  void set_shader_code_list(int index, std::string&& value);
  void set_shader_code_list(int index, const char* value);
  void set_shader_code_list(int index, const char* value, size_t size);
  std::string* add_shader_code_list();
  void add_shader_code_list(const std::string& value);
  void add_shader_code_list(std::string&& value);
  void add_shader_code_list(const char* value);
  void add_shader_code_list(const char* value, size_t size);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>& shader_code_list() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>* mutable_shader_code_list();
  private:
  const std::string& _internal_shader_code_list(int index) const;
  std::string* _internal_add_shader_code_list();
  public:

  // repeated string art_logic_list = 5;
  int art_logic_list_size() const;
  private:
  int _internal_art_logic_list_size() const;
  public:
  void clear_art_logic_list();
  const std::string& art_logic_list(int index) const;
  std::string* mutable_art_logic_list(int index);
  void set_art_logic_list(int index, const std::string& value);
  void set_art_logic_list(int index, std::string&& value);
  void set_art_logic_list(int index, const char* value);
  void set_art_logic_list(int index, const char* value, size_t size);
  std::string* add_art_logic_list();
  void add_art_logic_list(const std::string& value);
  void add_art_logic_list(std::string&& value);
  void add_art_logic_list(const char* value);
  void add_art_logic_list(const char* value, size_t size);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>& art_logic_list() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>* mutable_art_logic_list();
  private:
  const std::string& _internal_art_logic_list(int index) const;
  std::string* _internal_add_art_logic_list();
  public:

  // repeated string act_logic_list = 6;
  int act_logic_list_size() const;
  private:
  int _internal_act_logic_list_size() const;
  public:
  void clear_act_logic_list();
  const std::string& act_logic_list(int index) const;
  std::string* mutable_act_logic_list(int index);
  void set_act_logic_list(int index, const std::string& value);
  void set_act_logic_list(int index, std::string&& value);
  void set_act_logic_list(int index, const char* value);
  void set_act_logic_list(int index, const char* value, size_t size);
  std::string* add_act_logic_list();
  void add_act_logic_list(const std::string& value);
  void add_act_logic_list(std::string&& value);
  void add_act_logic_list(const char* value);
  void add_act_logic_list(const char* value, size_t size);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>& act_logic_list() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>* mutable_act_logic_list();
  private:
  const std::string& _internal_act_logic_list(int index) const;
  std::string* _internal_add_act_logic_list();
  public:

  // repeated string texture_list = 7;
  int texture_list_size() const;
  private:
  int _internal_texture_list_size() const;
  public:
  void clear_texture_list();
  const std::string& texture_list(int index) const;
  std::string* mutable_texture_list(int index);
  void set_texture_list(int index, const std::string& value);
  void set_texture_list(int index, std::string&& value);
  void set_texture_list(int index, const char* value);
  void set_texture_list(int index, const char* value, size_t size);
  std::string* add_texture_list();
  void add_texture_list(const std::string& value);
  void add_texture_list(std::string&& value);
  void add_texture_list(const char* value);
  void add_texture_list(const char* value, size_t size);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>& texture_list() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>* mutable_texture_list();
  private:
  const std::string& _internal_texture_list(int index) const;
  std::string* _internal_add_texture_list();
  public:

  // repeated string model_list = 8;
  int model_list_size() const;
  private:
  int _internal_model_list_size() const;
  public:
  void clear_model_list();
  const std::string& model_list(int index) const;
  std::string* mutable_model_list(int index);
  void set_model_list(int index, const std::string& value);
  void set_model_list(int index, std::string&& value);
  void set_model_list(int index, const char* value);
  void set_model_list(int index, const char* value, size_t size);
  std::string* add_model_list();
  void add_model_list(const std::string& value);
  void add_model_list(std::string&& value);
  void add_model_list(const char* value);
  void add_model_list(const char* value, size_t size);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>& model_list() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>* mutable_model_list();
  private:
  const std::string& _internal_model_list(int index) const;
  std::string* _internal_add_model_list();
  public:

  // repeated string shader_program_list = 9;
  int shader_program_list_size() const;
  private:
  int _internal_shader_program_list_size() const;
  public:
  void clear_shader_program_list();
  const std::string& shader_program_list(int index) const;
  std::string* mutable_shader_program_list(int index);
  void set_shader_program_list(int index, const std::string& value);
  void set_shader_program_list(int index, std::string&& value);
  void set_shader_program_list(int index, const char* value);
  void set_shader_program_list(int index, const char* value, size_t size);
  std::string* add_shader_program_list();
  void add_shader_program_list(const std::string& value);
  void add_shader_program_list(std::string&& value);
  void add_shader_program_list(const char* value);
  void add_shader_program_list(const char* value, size_t size);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>& shader_program_list() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>* mutable_shader_program_list();
  private:
  const std::string& _internal_shader_program_list(int index) const;
  std::string* _internal_add_shader_program_list();
  public:

  // repeated string material_list = 10;
  int material_list_size() const;
  private:
  int _internal_material_list_size() const;
  public:
  void clear_material_list();
  const std::string& material_list(int index) const;
  std::string* mutable_material_list(int index);
  void set_material_list(int index, const std::string& value);
  void set_material_list(int index, std::string&& value);
  void set_material_list(int index, const char* value);
  void set_material_list(int index, const char* value, size_t size);
  std::string* add_material_list();
  void add_material_list(const std::string& value);
  void add_material_list(std::string&& value);
  void add_material_list(const char* value);
  void add_material_list(const char* value, size_t size);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>& material_list() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>* mutable_material_list();
  private:
  const std::string& _internal_material_list(int index) const;
  std::string* _internal_add_material_list();
  public:

  // repeated string scene_list = 11;
  int scene_list_size() const;
  private:
  int _internal_scene_list_size() const;
  public:
  void clear_scene_list();
  const std::string& scene_list(int index) const;
  std::string* mutable_scene_list(int index);
  void set_scene_list(int index, const std::string& value);
  void set_scene_list(int index, std::string&& value);
  void set_scene_list(int index, const char* value);
  void set_scene_list(int index, const char* value, size_t size);
  std::string* add_scene_list();
  void add_scene_list(const std::string& value);
  void add_scene_list(std::string&& value);
  void add_scene_list(const char* value);
  void add_scene_list(const char* value, size_t size);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>& scene_list() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>* mutable_scene_list();
  private:
  const std::string& _internal_scene_list(int index) const;
  std::string* _internal_add_scene_list();
  public:

  // repeated string node_list = 12;
  int node_list_size() const;
  private:
  int _internal_node_list_size() const;
  public:
  void clear_node_list();
  const std::string& node_list(int index) const;
  std::string* mutable_node_list(int index);
  void set_node_list(int index, const std::string& value);
  void set_node_list(int index, std::string&& value);
  void set_node_list(int index, const char* value);
  void set_node_list(int index, const char* value, size_t size);
  std::string* add_node_list();
  void add_node_list(const std::string& value);
  void add_node_list(std::string&& value);
  void add_node_list(const char* value);
  void add_node_list(const char* value, size_t size);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>& node_list() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>* mutable_node_list();
  private:
  const std::string& _internal_node_list(int index) const;
  std::string* _internal_add_node_list();
  public:

  // string base_dir = 1;
  void clear_base_dir();
  const std::string& base_dir() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_base_dir(ArgT0&& arg0, ArgT... args);
  std::string* mutable_base_dir();
  PROTOBUF_NODISCARD std::string* release_base_dir();
  void set_allocated_base_dir(std::string* base_dir);
  private:
  const std::string& _internal_base_dir() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_base_dir(const std::string& value);
  std::string* _internal_mutable_base_dir();
  public:

  // @@protoc_insertion_point(class_scope:mc.comm.PBDirSpec)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string> image_list_;
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string> bin_buffer_list_;
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string> shader_code_list_;
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string> art_logic_list_;
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string> act_logic_list_;
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string> texture_list_;
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string> model_list_;
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string> shader_program_list_;
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string> material_list_;
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string> scene_list_;
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string> node_list_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr base_dir_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_mc_2fcomm_2fpbdirspec_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// PBDirSpec

// string base_dir = 1;
inline void PBDirSpec::clear_base_dir() {
  _impl_.base_dir_.ClearToEmpty();
}
inline const std::string& PBDirSpec::base_dir() const {
  // @@protoc_insertion_point(field_get:mc.comm.PBDirSpec.base_dir)
  return _internal_base_dir();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void PBDirSpec::set_base_dir(ArgT0&& arg0, ArgT... args) {
 
 _impl_.base_dir_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:mc.comm.PBDirSpec.base_dir)
}
inline std::string* PBDirSpec::mutable_base_dir() {
  std::string* _s = _internal_mutable_base_dir();
  // @@protoc_insertion_point(field_mutable:mc.comm.PBDirSpec.base_dir)
  return _s;
}
inline const std::string& PBDirSpec::_internal_base_dir() const {
  return _impl_.base_dir_.Get();
}
inline void PBDirSpec::_internal_set_base_dir(const std::string& value) {
  
  _impl_.base_dir_.Set(value, GetArenaForAllocation());
}
inline std::string* PBDirSpec::_internal_mutable_base_dir() {
  
  return _impl_.base_dir_.Mutable(GetArenaForAllocation());
}
inline std::string* PBDirSpec::release_base_dir() {
  // @@protoc_insertion_point(field_release:mc.comm.PBDirSpec.base_dir)
  return _impl_.base_dir_.Release();
}
inline void PBDirSpec::set_allocated_base_dir(std::string* base_dir) {
  if (base_dir != nullptr) {
    
  } else {
    
  }
  _impl_.base_dir_.SetAllocated(base_dir, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.base_dir_.IsDefault()) {
    _impl_.base_dir_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:mc.comm.PBDirSpec.base_dir)
}

// repeated string image_list = 2;
inline int PBDirSpec::_internal_image_list_size() const {
  return _impl_.image_list_.size();
}
inline int PBDirSpec::image_list_size() const {
  return _internal_image_list_size();
}
inline void PBDirSpec::clear_image_list() {
  _impl_.image_list_.Clear();
}
inline std::string* PBDirSpec::add_image_list() {
  std::string* _s = _internal_add_image_list();
  // @@protoc_insertion_point(field_add_mutable:mc.comm.PBDirSpec.image_list)
  return _s;
}
inline const std::string& PBDirSpec::_internal_image_list(int index) const {
  return _impl_.image_list_.Get(index);
}
inline const std::string& PBDirSpec::image_list(int index) const {
  // @@protoc_insertion_point(field_get:mc.comm.PBDirSpec.image_list)
  return _internal_image_list(index);
}
inline std::string* PBDirSpec::mutable_image_list(int index) {
  // @@protoc_insertion_point(field_mutable:mc.comm.PBDirSpec.image_list)
  return _impl_.image_list_.Mutable(index);
}
inline void PBDirSpec::set_image_list(int index, const std::string& value) {
  _impl_.image_list_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set:mc.comm.PBDirSpec.image_list)
}
inline void PBDirSpec::set_image_list(int index, std::string&& value) {
  _impl_.image_list_.Mutable(index)->assign(std::move(value));
  // @@protoc_insertion_point(field_set:mc.comm.PBDirSpec.image_list)
}
inline void PBDirSpec::set_image_list(int index, const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _impl_.image_list_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:mc.comm.PBDirSpec.image_list)
}
inline void PBDirSpec::set_image_list(int index, const char* value, size_t size) {
  _impl_.image_list_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:mc.comm.PBDirSpec.image_list)
}
inline std::string* PBDirSpec::_internal_add_image_list() {
  return _impl_.image_list_.Add();
}
inline void PBDirSpec::add_image_list(const std::string& value) {
  _impl_.image_list_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:mc.comm.PBDirSpec.image_list)
}
inline void PBDirSpec::add_image_list(std::string&& value) {
  _impl_.image_list_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:mc.comm.PBDirSpec.image_list)
}
inline void PBDirSpec::add_image_list(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _impl_.image_list_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:mc.comm.PBDirSpec.image_list)
}
inline void PBDirSpec::add_image_list(const char* value, size_t size) {
  _impl_.image_list_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:mc.comm.PBDirSpec.image_list)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>&
PBDirSpec::image_list() const {
  // @@protoc_insertion_point(field_list:mc.comm.PBDirSpec.image_list)
  return _impl_.image_list_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>*
PBDirSpec::mutable_image_list() {
  // @@protoc_insertion_point(field_mutable_list:mc.comm.PBDirSpec.image_list)
  return &_impl_.image_list_;
}

// repeated string bin_buffer_list = 3;
inline int PBDirSpec::_internal_bin_buffer_list_size() const {
  return _impl_.bin_buffer_list_.size();
}
inline int PBDirSpec::bin_buffer_list_size() const {
  return _internal_bin_buffer_list_size();
}
inline void PBDirSpec::clear_bin_buffer_list() {
  _impl_.bin_buffer_list_.Clear();
}
inline std::string* PBDirSpec::add_bin_buffer_list() {
  std::string* _s = _internal_add_bin_buffer_list();
  // @@protoc_insertion_point(field_add_mutable:mc.comm.PBDirSpec.bin_buffer_list)
  return _s;
}
inline const std::string& PBDirSpec::_internal_bin_buffer_list(int index) const {
  return _impl_.bin_buffer_list_.Get(index);
}
inline const std::string& PBDirSpec::bin_buffer_list(int index) const {
  // @@protoc_insertion_point(field_get:mc.comm.PBDirSpec.bin_buffer_list)
  return _internal_bin_buffer_list(index);
}
inline std::string* PBDirSpec::mutable_bin_buffer_list(int index) {
  // @@protoc_insertion_point(field_mutable:mc.comm.PBDirSpec.bin_buffer_list)
  return _impl_.bin_buffer_list_.Mutable(index);
}
inline void PBDirSpec::set_bin_buffer_list(int index, const std::string& value) {
  _impl_.bin_buffer_list_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set:mc.comm.PBDirSpec.bin_buffer_list)
}
inline void PBDirSpec::set_bin_buffer_list(int index, std::string&& value) {
  _impl_.bin_buffer_list_.Mutable(index)->assign(std::move(value));
  // @@protoc_insertion_point(field_set:mc.comm.PBDirSpec.bin_buffer_list)
}
inline void PBDirSpec::set_bin_buffer_list(int index, const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _impl_.bin_buffer_list_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:mc.comm.PBDirSpec.bin_buffer_list)
}
inline void PBDirSpec::set_bin_buffer_list(int index, const char* value, size_t size) {
  _impl_.bin_buffer_list_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:mc.comm.PBDirSpec.bin_buffer_list)
}
inline std::string* PBDirSpec::_internal_add_bin_buffer_list() {
  return _impl_.bin_buffer_list_.Add();
}
inline void PBDirSpec::add_bin_buffer_list(const std::string& value) {
  _impl_.bin_buffer_list_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:mc.comm.PBDirSpec.bin_buffer_list)
}
inline void PBDirSpec::add_bin_buffer_list(std::string&& value) {
  _impl_.bin_buffer_list_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:mc.comm.PBDirSpec.bin_buffer_list)
}
inline void PBDirSpec::add_bin_buffer_list(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _impl_.bin_buffer_list_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:mc.comm.PBDirSpec.bin_buffer_list)
}
inline void PBDirSpec::add_bin_buffer_list(const char* value, size_t size) {
  _impl_.bin_buffer_list_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:mc.comm.PBDirSpec.bin_buffer_list)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>&
PBDirSpec::bin_buffer_list() const {
  // @@protoc_insertion_point(field_list:mc.comm.PBDirSpec.bin_buffer_list)
  return _impl_.bin_buffer_list_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>*
PBDirSpec::mutable_bin_buffer_list() {
  // @@protoc_insertion_point(field_mutable_list:mc.comm.PBDirSpec.bin_buffer_list)
  return &_impl_.bin_buffer_list_;
}

// repeated string shader_code_list = 4;
inline int PBDirSpec::_internal_shader_code_list_size() const {
  return _impl_.shader_code_list_.size();
}
inline int PBDirSpec::shader_code_list_size() const {
  return _internal_shader_code_list_size();
}
inline void PBDirSpec::clear_shader_code_list() {
  _impl_.shader_code_list_.Clear();
}
inline std::string* PBDirSpec::add_shader_code_list() {
  std::string* _s = _internal_add_shader_code_list();
  // @@protoc_insertion_point(field_add_mutable:mc.comm.PBDirSpec.shader_code_list)
  return _s;
}
inline const std::string& PBDirSpec::_internal_shader_code_list(int index) const {
  return _impl_.shader_code_list_.Get(index);
}
inline const std::string& PBDirSpec::shader_code_list(int index) const {
  // @@protoc_insertion_point(field_get:mc.comm.PBDirSpec.shader_code_list)
  return _internal_shader_code_list(index);
}
inline std::string* PBDirSpec::mutable_shader_code_list(int index) {
  // @@protoc_insertion_point(field_mutable:mc.comm.PBDirSpec.shader_code_list)
  return _impl_.shader_code_list_.Mutable(index);
}
inline void PBDirSpec::set_shader_code_list(int index, const std::string& value) {
  _impl_.shader_code_list_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set:mc.comm.PBDirSpec.shader_code_list)
}
inline void PBDirSpec::set_shader_code_list(int index, std::string&& value) {
  _impl_.shader_code_list_.Mutable(index)->assign(std::move(value));
  // @@protoc_insertion_point(field_set:mc.comm.PBDirSpec.shader_code_list)
}
inline void PBDirSpec::set_shader_code_list(int index, const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _impl_.shader_code_list_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:mc.comm.PBDirSpec.shader_code_list)
}
inline void PBDirSpec::set_shader_code_list(int index, const char* value, size_t size) {
  _impl_.shader_code_list_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:mc.comm.PBDirSpec.shader_code_list)
}
inline std::string* PBDirSpec::_internal_add_shader_code_list() {
  return _impl_.shader_code_list_.Add();
}
inline void PBDirSpec::add_shader_code_list(const std::string& value) {
  _impl_.shader_code_list_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:mc.comm.PBDirSpec.shader_code_list)
}
inline void PBDirSpec::add_shader_code_list(std::string&& value) {
  _impl_.shader_code_list_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:mc.comm.PBDirSpec.shader_code_list)
}
inline void PBDirSpec::add_shader_code_list(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _impl_.shader_code_list_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:mc.comm.PBDirSpec.shader_code_list)
}
inline void PBDirSpec::add_shader_code_list(const char* value, size_t size) {
  _impl_.shader_code_list_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:mc.comm.PBDirSpec.shader_code_list)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>&
PBDirSpec::shader_code_list() const {
  // @@protoc_insertion_point(field_list:mc.comm.PBDirSpec.shader_code_list)
  return _impl_.shader_code_list_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>*
PBDirSpec::mutable_shader_code_list() {
  // @@protoc_insertion_point(field_mutable_list:mc.comm.PBDirSpec.shader_code_list)
  return &_impl_.shader_code_list_;
}

// repeated string art_logic_list = 5;
inline int PBDirSpec::_internal_art_logic_list_size() const {
  return _impl_.art_logic_list_.size();
}
inline int PBDirSpec::art_logic_list_size() const {
  return _internal_art_logic_list_size();
}
inline void PBDirSpec::clear_art_logic_list() {
  _impl_.art_logic_list_.Clear();
}
inline std::string* PBDirSpec::add_art_logic_list() {
  std::string* _s = _internal_add_art_logic_list();
  // @@protoc_insertion_point(field_add_mutable:mc.comm.PBDirSpec.art_logic_list)
  return _s;
}
inline const std::string& PBDirSpec::_internal_art_logic_list(int index) const {
  return _impl_.art_logic_list_.Get(index);
}
inline const std::string& PBDirSpec::art_logic_list(int index) const {
  // @@protoc_insertion_point(field_get:mc.comm.PBDirSpec.art_logic_list)
  return _internal_art_logic_list(index);
}
inline std::string* PBDirSpec::mutable_art_logic_list(int index) {
  // @@protoc_insertion_point(field_mutable:mc.comm.PBDirSpec.art_logic_list)
  return _impl_.art_logic_list_.Mutable(index);
}
inline void PBDirSpec::set_art_logic_list(int index, const std::string& value) {
  _impl_.art_logic_list_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set:mc.comm.PBDirSpec.art_logic_list)
}
inline void PBDirSpec::set_art_logic_list(int index, std::string&& value) {
  _impl_.art_logic_list_.Mutable(index)->assign(std::move(value));
  // @@protoc_insertion_point(field_set:mc.comm.PBDirSpec.art_logic_list)
}
inline void PBDirSpec::set_art_logic_list(int index, const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _impl_.art_logic_list_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:mc.comm.PBDirSpec.art_logic_list)
}
inline void PBDirSpec::set_art_logic_list(int index, const char* value, size_t size) {
  _impl_.art_logic_list_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:mc.comm.PBDirSpec.art_logic_list)
}
inline std::string* PBDirSpec::_internal_add_art_logic_list() {
  return _impl_.art_logic_list_.Add();
}
inline void PBDirSpec::add_art_logic_list(const std::string& value) {
  _impl_.art_logic_list_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:mc.comm.PBDirSpec.art_logic_list)
}
inline void PBDirSpec::add_art_logic_list(std::string&& value) {
  _impl_.art_logic_list_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:mc.comm.PBDirSpec.art_logic_list)
}
inline void PBDirSpec::add_art_logic_list(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _impl_.art_logic_list_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:mc.comm.PBDirSpec.art_logic_list)
}
inline void PBDirSpec::add_art_logic_list(const char* value, size_t size) {
  _impl_.art_logic_list_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:mc.comm.PBDirSpec.art_logic_list)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>&
PBDirSpec::art_logic_list() const {
  // @@protoc_insertion_point(field_list:mc.comm.PBDirSpec.art_logic_list)
  return _impl_.art_logic_list_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>*
PBDirSpec::mutable_art_logic_list() {
  // @@protoc_insertion_point(field_mutable_list:mc.comm.PBDirSpec.art_logic_list)
  return &_impl_.art_logic_list_;
}

// repeated string act_logic_list = 6;
inline int PBDirSpec::_internal_act_logic_list_size() const {
  return _impl_.act_logic_list_.size();
}
inline int PBDirSpec::act_logic_list_size() const {
  return _internal_act_logic_list_size();
}
inline void PBDirSpec::clear_act_logic_list() {
  _impl_.act_logic_list_.Clear();
}
inline std::string* PBDirSpec::add_act_logic_list() {
  std::string* _s = _internal_add_act_logic_list();
  // @@protoc_insertion_point(field_add_mutable:mc.comm.PBDirSpec.act_logic_list)
  return _s;
}
inline const std::string& PBDirSpec::_internal_act_logic_list(int index) const {
  return _impl_.act_logic_list_.Get(index);
}
inline const std::string& PBDirSpec::act_logic_list(int index) const {
  // @@protoc_insertion_point(field_get:mc.comm.PBDirSpec.act_logic_list)
  return _internal_act_logic_list(index);
}
inline std::string* PBDirSpec::mutable_act_logic_list(int index) {
  // @@protoc_insertion_point(field_mutable:mc.comm.PBDirSpec.act_logic_list)
  return _impl_.act_logic_list_.Mutable(index);
}
inline void PBDirSpec::set_act_logic_list(int index, const std::string& value) {
  _impl_.act_logic_list_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set:mc.comm.PBDirSpec.act_logic_list)
}
inline void PBDirSpec::set_act_logic_list(int index, std::string&& value) {
  _impl_.act_logic_list_.Mutable(index)->assign(std::move(value));
  // @@protoc_insertion_point(field_set:mc.comm.PBDirSpec.act_logic_list)
}
inline void PBDirSpec::set_act_logic_list(int index, const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _impl_.act_logic_list_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:mc.comm.PBDirSpec.act_logic_list)
}
inline void PBDirSpec::set_act_logic_list(int index, const char* value, size_t size) {
  _impl_.act_logic_list_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:mc.comm.PBDirSpec.act_logic_list)
}
inline std::string* PBDirSpec::_internal_add_act_logic_list() {
  return _impl_.act_logic_list_.Add();
}
inline void PBDirSpec::add_act_logic_list(const std::string& value) {
  _impl_.act_logic_list_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:mc.comm.PBDirSpec.act_logic_list)
}
inline void PBDirSpec::add_act_logic_list(std::string&& value) {
  _impl_.act_logic_list_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:mc.comm.PBDirSpec.act_logic_list)
}
inline void PBDirSpec::add_act_logic_list(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _impl_.act_logic_list_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:mc.comm.PBDirSpec.act_logic_list)
}
inline void PBDirSpec::add_act_logic_list(const char* value, size_t size) {
  _impl_.act_logic_list_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:mc.comm.PBDirSpec.act_logic_list)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>&
PBDirSpec::act_logic_list() const {
  // @@protoc_insertion_point(field_list:mc.comm.PBDirSpec.act_logic_list)
  return _impl_.act_logic_list_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>*
PBDirSpec::mutable_act_logic_list() {
  // @@protoc_insertion_point(field_mutable_list:mc.comm.PBDirSpec.act_logic_list)
  return &_impl_.act_logic_list_;
}

// repeated string texture_list = 7;
inline int PBDirSpec::_internal_texture_list_size() const {
  return _impl_.texture_list_.size();
}
inline int PBDirSpec::texture_list_size() const {
  return _internal_texture_list_size();
}
inline void PBDirSpec::clear_texture_list() {
  _impl_.texture_list_.Clear();
}
inline std::string* PBDirSpec::add_texture_list() {
  std::string* _s = _internal_add_texture_list();
  // @@protoc_insertion_point(field_add_mutable:mc.comm.PBDirSpec.texture_list)
  return _s;
}
inline const std::string& PBDirSpec::_internal_texture_list(int index) const {
  return _impl_.texture_list_.Get(index);
}
inline const std::string& PBDirSpec::texture_list(int index) const {
  // @@protoc_insertion_point(field_get:mc.comm.PBDirSpec.texture_list)
  return _internal_texture_list(index);
}
inline std::string* PBDirSpec::mutable_texture_list(int index) {
  // @@protoc_insertion_point(field_mutable:mc.comm.PBDirSpec.texture_list)
  return _impl_.texture_list_.Mutable(index);
}
inline void PBDirSpec::set_texture_list(int index, const std::string& value) {
  _impl_.texture_list_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set:mc.comm.PBDirSpec.texture_list)
}
inline void PBDirSpec::set_texture_list(int index, std::string&& value) {
  _impl_.texture_list_.Mutable(index)->assign(std::move(value));
  // @@protoc_insertion_point(field_set:mc.comm.PBDirSpec.texture_list)
}
inline void PBDirSpec::set_texture_list(int index, const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _impl_.texture_list_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:mc.comm.PBDirSpec.texture_list)
}
inline void PBDirSpec::set_texture_list(int index, const char* value, size_t size) {
  _impl_.texture_list_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:mc.comm.PBDirSpec.texture_list)
}
inline std::string* PBDirSpec::_internal_add_texture_list() {
  return _impl_.texture_list_.Add();
}
inline void PBDirSpec::add_texture_list(const std::string& value) {
  _impl_.texture_list_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:mc.comm.PBDirSpec.texture_list)
}
inline void PBDirSpec::add_texture_list(std::string&& value) {
  _impl_.texture_list_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:mc.comm.PBDirSpec.texture_list)
}
inline void PBDirSpec::add_texture_list(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _impl_.texture_list_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:mc.comm.PBDirSpec.texture_list)
}
inline void PBDirSpec::add_texture_list(const char* value, size_t size) {
  _impl_.texture_list_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:mc.comm.PBDirSpec.texture_list)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>&
PBDirSpec::texture_list() const {
  // @@protoc_insertion_point(field_list:mc.comm.PBDirSpec.texture_list)
  return _impl_.texture_list_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>*
PBDirSpec::mutable_texture_list() {
  // @@protoc_insertion_point(field_mutable_list:mc.comm.PBDirSpec.texture_list)
  return &_impl_.texture_list_;
}

// repeated string model_list = 8;
inline int PBDirSpec::_internal_model_list_size() const {
  return _impl_.model_list_.size();
}
inline int PBDirSpec::model_list_size() const {
  return _internal_model_list_size();
}
inline void PBDirSpec::clear_model_list() {
  _impl_.model_list_.Clear();
}
inline std::string* PBDirSpec::add_model_list() {
  std::string* _s = _internal_add_model_list();
  // @@protoc_insertion_point(field_add_mutable:mc.comm.PBDirSpec.model_list)
  return _s;
}
inline const std::string& PBDirSpec::_internal_model_list(int index) const {
  return _impl_.model_list_.Get(index);
}
inline const std::string& PBDirSpec::model_list(int index) const {
  // @@protoc_insertion_point(field_get:mc.comm.PBDirSpec.model_list)
  return _internal_model_list(index);
}
inline std::string* PBDirSpec::mutable_model_list(int index) {
  // @@protoc_insertion_point(field_mutable:mc.comm.PBDirSpec.model_list)
  return _impl_.model_list_.Mutable(index);
}
inline void PBDirSpec::set_model_list(int index, const std::string& value) {
  _impl_.model_list_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set:mc.comm.PBDirSpec.model_list)
}
inline void PBDirSpec::set_model_list(int index, std::string&& value) {
  _impl_.model_list_.Mutable(index)->assign(std::move(value));
  // @@protoc_insertion_point(field_set:mc.comm.PBDirSpec.model_list)
}
inline void PBDirSpec::set_model_list(int index, const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _impl_.model_list_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:mc.comm.PBDirSpec.model_list)
}
inline void PBDirSpec::set_model_list(int index, const char* value, size_t size) {
  _impl_.model_list_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:mc.comm.PBDirSpec.model_list)
}
inline std::string* PBDirSpec::_internal_add_model_list() {
  return _impl_.model_list_.Add();
}
inline void PBDirSpec::add_model_list(const std::string& value) {
  _impl_.model_list_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:mc.comm.PBDirSpec.model_list)
}
inline void PBDirSpec::add_model_list(std::string&& value) {
  _impl_.model_list_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:mc.comm.PBDirSpec.model_list)
}
inline void PBDirSpec::add_model_list(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _impl_.model_list_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:mc.comm.PBDirSpec.model_list)
}
inline void PBDirSpec::add_model_list(const char* value, size_t size) {
  _impl_.model_list_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:mc.comm.PBDirSpec.model_list)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>&
PBDirSpec::model_list() const {
  // @@protoc_insertion_point(field_list:mc.comm.PBDirSpec.model_list)
  return _impl_.model_list_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>*
PBDirSpec::mutable_model_list() {
  // @@protoc_insertion_point(field_mutable_list:mc.comm.PBDirSpec.model_list)
  return &_impl_.model_list_;
}

// repeated string shader_program_list = 9;
inline int PBDirSpec::_internal_shader_program_list_size() const {
  return _impl_.shader_program_list_.size();
}
inline int PBDirSpec::shader_program_list_size() const {
  return _internal_shader_program_list_size();
}
inline void PBDirSpec::clear_shader_program_list() {
  _impl_.shader_program_list_.Clear();
}
inline std::string* PBDirSpec::add_shader_program_list() {
  std::string* _s = _internal_add_shader_program_list();
  // @@protoc_insertion_point(field_add_mutable:mc.comm.PBDirSpec.shader_program_list)
  return _s;
}
inline const std::string& PBDirSpec::_internal_shader_program_list(int index) const {
  return _impl_.shader_program_list_.Get(index);
}
inline const std::string& PBDirSpec::shader_program_list(int index) const {
  // @@protoc_insertion_point(field_get:mc.comm.PBDirSpec.shader_program_list)
  return _internal_shader_program_list(index);
}
inline std::string* PBDirSpec::mutable_shader_program_list(int index) {
  // @@protoc_insertion_point(field_mutable:mc.comm.PBDirSpec.shader_program_list)
  return _impl_.shader_program_list_.Mutable(index);
}
inline void PBDirSpec::set_shader_program_list(int index, const std::string& value) {
  _impl_.shader_program_list_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set:mc.comm.PBDirSpec.shader_program_list)
}
inline void PBDirSpec::set_shader_program_list(int index, std::string&& value) {
  _impl_.shader_program_list_.Mutable(index)->assign(std::move(value));
  // @@protoc_insertion_point(field_set:mc.comm.PBDirSpec.shader_program_list)
}
inline void PBDirSpec::set_shader_program_list(int index, const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _impl_.shader_program_list_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:mc.comm.PBDirSpec.shader_program_list)
}
inline void PBDirSpec::set_shader_program_list(int index, const char* value, size_t size) {
  _impl_.shader_program_list_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:mc.comm.PBDirSpec.shader_program_list)
}
inline std::string* PBDirSpec::_internal_add_shader_program_list() {
  return _impl_.shader_program_list_.Add();
}
inline void PBDirSpec::add_shader_program_list(const std::string& value) {
  _impl_.shader_program_list_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:mc.comm.PBDirSpec.shader_program_list)
}
inline void PBDirSpec::add_shader_program_list(std::string&& value) {
  _impl_.shader_program_list_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:mc.comm.PBDirSpec.shader_program_list)
}
inline void PBDirSpec::add_shader_program_list(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _impl_.shader_program_list_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:mc.comm.PBDirSpec.shader_program_list)
}
inline void PBDirSpec::add_shader_program_list(const char* value, size_t size) {
  _impl_.shader_program_list_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:mc.comm.PBDirSpec.shader_program_list)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>&
PBDirSpec::shader_program_list() const {
  // @@protoc_insertion_point(field_list:mc.comm.PBDirSpec.shader_program_list)
  return _impl_.shader_program_list_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>*
PBDirSpec::mutable_shader_program_list() {
  // @@protoc_insertion_point(field_mutable_list:mc.comm.PBDirSpec.shader_program_list)
  return &_impl_.shader_program_list_;
}

// repeated string material_list = 10;
inline int PBDirSpec::_internal_material_list_size() const {
  return _impl_.material_list_.size();
}
inline int PBDirSpec::material_list_size() const {
  return _internal_material_list_size();
}
inline void PBDirSpec::clear_material_list() {
  _impl_.material_list_.Clear();
}
inline std::string* PBDirSpec::add_material_list() {
  std::string* _s = _internal_add_material_list();
  // @@protoc_insertion_point(field_add_mutable:mc.comm.PBDirSpec.material_list)
  return _s;
}
inline const std::string& PBDirSpec::_internal_material_list(int index) const {
  return _impl_.material_list_.Get(index);
}
inline const std::string& PBDirSpec::material_list(int index) const {
  // @@protoc_insertion_point(field_get:mc.comm.PBDirSpec.material_list)
  return _internal_material_list(index);
}
inline std::string* PBDirSpec::mutable_material_list(int index) {
  // @@protoc_insertion_point(field_mutable:mc.comm.PBDirSpec.material_list)
  return _impl_.material_list_.Mutable(index);
}
inline void PBDirSpec::set_material_list(int index, const std::string& value) {
  _impl_.material_list_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set:mc.comm.PBDirSpec.material_list)
}
inline void PBDirSpec::set_material_list(int index, std::string&& value) {
  _impl_.material_list_.Mutable(index)->assign(std::move(value));
  // @@protoc_insertion_point(field_set:mc.comm.PBDirSpec.material_list)
}
inline void PBDirSpec::set_material_list(int index, const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _impl_.material_list_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:mc.comm.PBDirSpec.material_list)
}
inline void PBDirSpec::set_material_list(int index, const char* value, size_t size) {
  _impl_.material_list_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:mc.comm.PBDirSpec.material_list)
}
inline std::string* PBDirSpec::_internal_add_material_list() {
  return _impl_.material_list_.Add();
}
inline void PBDirSpec::add_material_list(const std::string& value) {
  _impl_.material_list_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:mc.comm.PBDirSpec.material_list)
}
inline void PBDirSpec::add_material_list(std::string&& value) {
  _impl_.material_list_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:mc.comm.PBDirSpec.material_list)
}
inline void PBDirSpec::add_material_list(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _impl_.material_list_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:mc.comm.PBDirSpec.material_list)
}
inline void PBDirSpec::add_material_list(const char* value, size_t size) {
  _impl_.material_list_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:mc.comm.PBDirSpec.material_list)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>&
PBDirSpec::material_list() const {
  // @@protoc_insertion_point(field_list:mc.comm.PBDirSpec.material_list)
  return _impl_.material_list_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>*
PBDirSpec::mutable_material_list() {
  // @@protoc_insertion_point(field_mutable_list:mc.comm.PBDirSpec.material_list)
  return &_impl_.material_list_;
}

// repeated string scene_list = 11;
inline int PBDirSpec::_internal_scene_list_size() const {
  return _impl_.scene_list_.size();
}
inline int PBDirSpec::scene_list_size() const {
  return _internal_scene_list_size();
}
inline void PBDirSpec::clear_scene_list() {
  _impl_.scene_list_.Clear();
}
inline std::string* PBDirSpec::add_scene_list() {
  std::string* _s = _internal_add_scene_list();
  // @@protoc_insertion_point(field_add_mutable:mc.comm.PBDirSpec.scene_list)
  return _s;
}
inline const std::string& PBDirSpec::_internal_scene_list(int index) const {
  return _impl_.scene_list_.Get(index);
}
inline const std::string& PBDirSpec::scene_list(int index) const {
  // @@protoc_insertion_point(field_get:mc.comm.PBDirSpec.scene_list)
  return _internal_scene_list(index);
}
inline std::string* PBDirSpec::mutable_scene_list(int index) {
  // @@protoc_insertion_point(field_mutable:mc.comm.PBDirSpec.scene_list)
  return _impl_.scene_list_.Mutable(index);
}
inline void PBDirSpec::set_scene_list(int index, const std::string& value) {
  _impl_.scene_list_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set:mc.comm.PBDirSpec.scene_list)
}
inline void PBDirSpec::set_scene_list(int index, std::string&& value) {
  _impl_.scene_list_.Mutable(index)->assign(std::move(value));
  // @@protoc_insertion_point(field_set:mc.comm.PBDirSpec.scene_list)
}
inline void PBDirSpec::set_scene_list(int index, const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _impl_.scene_list_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:mc.comm.PBDirSpec.scene_list)
}
inline void PBDirSpec::set_scene_list(int index, const char* value, size_t size) {
  _impl_.scene_list_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:mc.comm.PBDirSpec.scene_list)
}
inline std::string* PBDirSpec::_internal_add_scene_list() {
  return _impl_.scene_list_.Add();
}
inline void PBDirSpec::add_scene_list(const std::string& value) {
  _impl_.scene_list_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:mc.comm.PBDirSpec.scene_list)
}
inline void PBDirSpec::add_scene_list(std::string&& value) {
  _impl_.scene_list_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:mc.comm.PBDirSpec.scene_list)
}
inline void PBDirSpec::add_scene_list(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _impl_.scene_list_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:mc.comm.PBDirSpec.scene_list)
}
inline void PBDirSpec::add_scene_list(const char* value, size_t size) {
  _impl_.scene_list_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:mc.comm.PBDirSpec.scene_list)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>&
PBDirSpec::scene_list() const {
  // @@protoc_insertion_point(field_list:mc.comm.PBDirSpec.scene_list)
  return _impl_.scene_list_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>*
PBDirSpec::mutable_scene_list() {
  // @@protoc_insertion_point(field_mutable_list:mc.comm.PBDirSpec.scene_list)
  return &_impl_.scene_list_;
}

// repeated string node_list = 12;
inline int PBDirSpec::_internal_node_list_size() const {
  return _impl_.node_list_.size();
}
inline int PBDirSpec::node_list_size() const {
  return _internal_node_list_size();
}
inline void PBDirSpec::clear_node_list() {
  _impl_.node_list_.Clear();
}
inline std::string* PBDirSpec::add_node_list() {
  std::string* _s = _internal_add_node_list();
  // @@protoc_insertion_point(field_add_mutable:mc.comm.PBDirSpec.node_list)
  return _s;
}
inline const std::string& PBDirSpec::_internal_node_list(int index) const {
  return _impl_.node_list_.Get(index);
}
inline const std::string& PBDirSpec::node_list(int index) const {
  // @@protoc_insertion_point(field_get:mc.comm.PBDirSpec.node_list)
  return _internal_node_list(index);
}
inline std::string* PBDirSpec::mutable_node_list(int index) {
  // @@protoc_insertion_point(field_mutable:mc.comm.PBDirSpec.node_list)
  return _impl_.node_list_.Mutable(index);
}
inline void PBDirSpec::set_node_list(int index, const std::string& value) {
  _impl_.node_list_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set:mc.comm.PBDirSpec.node_list)
}
inline void PBDirSpec::set_node_list(int index, std::string&& value) {
  _impl_.node_list_.Mutable(index)->assign(std::move(value));
  // @@protoc_insertion_point(field_set:mc.comm.PBDirSpec.node_list)
}
inline void PBDirSpec::set_node_list(int index, const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _impl_.node_list_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:mc.comm.PBDirSpec.node_list)
}
inline void PBDirSpec::set_node_list(int index, const char* value, size_t size) {
  _impl_.node_list_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:mc.comm.PBDirSpec.node_list)
}
inline std::string* PBDirSpec::_internal_add_node_list() {
  return _impl_.node_list_.Add();
}
inline void PBDirSpec::add_node_list(const std::string& value) {
  _impl_.node_list_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:mc.comm.PBDirSpec.node_list)
}
inline void PBDirSpec::add_node_list(std::string&& value) {
  _impl_.node_list_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:mc.comm.PBDirSpec.node_list)
}
inline void PBDirSpec::add_node_list(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _impl_.node_list_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:mc.comm.PBDirSpec.node_list)
}
inline void PBDirSpec::add_node_list(const char* value, size_t size) {
  _impl_.node_list_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:mc.comm.PBDirSpec.node_list)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>&
PBDirSpec::node_list() const {
  // @@protoc_insertion_point(field_list:mc.comm.PBDirSpec.node_list)
  return _impl_.node_list_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>*
PBDirSpec::mutable_node_list() {
  // @@protoc_insertion_point(field_mutable_list:mc.comm.PBDirSpec.node_list)
  return &_impl_.node_list_;
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__

// @@protoc_insertion_point(namespace_scope)

}  // namespace comm
}  // namespace mc

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_mc_2fcomm_2fpbdirspec_2eproto
