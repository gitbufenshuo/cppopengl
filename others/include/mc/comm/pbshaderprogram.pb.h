// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: mc/comm/pbshaderprogram.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_mc_2fcomm_2fpbshaderprogram_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_mc_2fcomm_2fpbshaderprogram_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3021000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3021005 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_mc_2fcomm_2fpbshaderprogram_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_mc_2fcomm_2fpbshaderprogram_2eproto {
  static const uint32_t offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_mc_2fcomm_2fpbshaderprogram_2eproto;
namespace mc {
namespace comm {
class PBShaderProgram;
struct PBShaderProgramDefaultTypeInternal;
extern PBShaderProgramDefaultTypeInternal _PBShaderProgram_default_instance_;
}  // namespace comm
}  // namespace mc
PROTOBUF_NAMESPACE_OPEN
template<> ::mc::comm::PBShaderProgram* Arena::CreateMaybeMessage<::mc::comm::PBShaderProgram>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace mc {
namespace comm {

// ===================================================================

class PBShaderProgram final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:mc.comm.PBShaderProgram) */ {
 public:
  inline PBShaderProgram() : PBShaderProgram(nullptr) {}
  ~PBShaderProgram() override;
  explicit PROTOBUF_CONSTEXPR PBShaderProgram(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  PBShaderProgram(const PBShaderProgram& from);
  PBShaderProgram(PBShaderProgram&& from) noexcept
    : PBShaderProgram() {
    *this = ::std::move(from);
  }

  inline PBShaderProgram& operator=(const PBShaderProgram& from) {
    CopyFrom(from);
    return *this;
  }
  inline PBShaderProgram& operator=(PBShaderProgram&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const PBShaderProgram& default_instance() {
    return *internal_default_instance();
  }
  static inline const PBShaderProgram* internal_default_instance() {
    return reinterpret_cast<const PBShaderProgram*>(
               &_PBShaderProgram_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(PBShaderProgram& a, PBShaderProgram& b) {
    a.Swap(&b);
  }
  inline void Swap(PBShaderProgram* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(PBShaderProgram* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  PBShaderProgram* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<PBShaderProgram>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const PBShaderProgram& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const PBShaderProgram& from) {
    PBShaderProgram::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(PBShaderProgram* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "mc.comm.PBShaderProgram";
  }
  protected:
  explicit PBShaderProgram(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kVsFieldNumber = 1,
    kFsFieldNumber = 2,
  };
  // string vs = 1;
  void clear_vs();
  const std::string& vs() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_vs(ArgT0&& arg0, ArgT... args);
  std::string* mutable_vs();
  PROTOBUF_NODISCARD std::string* release_vs();
  void set_allocated_vs(std::string* vs);
  private:
  const std::string& _internal_vs() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_vs(const std::string& value);
  std::string* _internal_mutable_vs();
  public:

  // string fs = 2;
  void clear_fs();
  const std::string& fs() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_fs(ArgT0&& arg0, ArgT... args);
  std::string* mutable_fs();
  PROTOBUF_NODISCARD std::string* release_fs();
  void set_allocated_fs(std::string* fs);
  private:
  const std::string& _internal_fs() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_fs(const std::string& value);
  std::string* _internal_mutable_fs();
  public:

  // @@protoc_insertion_point(class_scope:mc.comm.PBShaderProgram)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr vs_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr fs_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_mc_2fcomm_2fpbshaderprogram_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// PBShaderProgram

// string vs = 1;
inline void PBShaderProgram::clear_vs() {
  _impl_.vs_.ClearToEmpty();
}
inline const std::string& PBShaderProgram::vs() const {
  // @@protoc_insertion_point(field_get:mc.comm.PBShaderProgram.vs)
  return _internal_vs();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void PBShaderProgram::set_vs(ArgT0&& arg0, ArgT... args) {
 
 _impl_.vs_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:mc.comm.PBShaderProgram.vs)
}
inline std::string* PBShaderProgram::mutable_vs() {
  std::string* _s = _internal_mutable_vs();
  // @@protoc_insertion_point(field_mutable:mc.comm.PBShaderProgram.vs)
  return _s;
}
inline const std::string& PBShaderProgram::_internal_vs() const {
  return _impl_.vs_.Get();
}
inline void PBShaderProgram::_internal_set_vs(const std::string& value) {
  
  _impl_.vs_.Set(value, GetArenaForAllocation());
}
inline std::string* PBShaderProgram::_internal_mutable_vs() {
  
  return _impl_.vs_.Mutable(GetArenaForAllocation());
}
inline std::string* PBShaderProgram::release_vs() {
  // @@protoc_insertion_point(field_release:mc.comm.PBShaderProgram.vs)
  return _impl_.vs_.Release();
}
inline void PBShaderProgram::set_allocated_vs(std::string* vs) {
  if (vs != nullptr) {
    
  } else {
    
  }
  _impl_.vs_.SetAllocated(vs, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.vs_.IsDefault()) {
    _impl_.vs_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:mc.comm.PBShaderProgram.vs)
}

// string fs = 2;
inline void PBShaderProgram::clear_fs() {
  _impl_.fs_.ClearToEmpty();
}
inline const std::string& PBShaderProgram::fs() const {
  // @@protoc_insertion_point(field_get:mc.comm.PBShaderProgram.fs)
  return _internal_fs();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void PBShaderProgram::set_fs(ArgT0&& arg0, ArgT... args) {
 
 _impl_.fs_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:mc.comm.PBShaderProgram.fs)
}
inline std::string* PBShaderProgram::mutable_fs() {
  std::string* _s = _internal_mutable_fs();
  // @@protoc_insertion_point(field_mutable:mc.comm.PBShaderProgram.fs)
  return _s;
}
inline const std::string& PBShaderProgram::_internal_fs() const {
  return _impl_.fs_.Get();
}
inline void PBShaderProgram::_internal_set_fs(const std::string& value) {
  
  _impl_.fs_.Set(value, GetArenaForAllocation());
}
inline std::string* PBShaderProgram::_internal_mutable_fs() {
  
  return _impl_.fs_.Mutable(GetArenaForAllocation());
}
inline std::string* PBShaderProgram::release_fs() {
  // @@protoc_insertion_point(field_release:mc.comm.PBShaderProgram.fs)
  return _impl_.fs_.Release();
}
inline void PBShaderProgram::set_allocated_fs(std::string* fs) {
  if (fs != nullptr) {
    
  } else {
    
  }
  _impl_.fs_.SetAllocated(fs, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.fs_.IsDefault()) {
    _impl_.fs_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:mc.comm.PBShaderProgram.fs)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__

// @@protoc_insertion_point(namespace_scope)

}  // namespace comm
}  // namespace mc

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_mc_2fcomm_2fpbshaderprogram_2eproto
