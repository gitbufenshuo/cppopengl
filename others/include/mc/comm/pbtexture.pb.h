// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: mc/comm/pbtexture.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_mc_2fcomm_2fpbtexture_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_mc_2fcomm_2fpbtexture_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3021000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3021005 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_mc_2fcomm_2fpbtexture_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_mc_2fcomm_2fpbtexture_2eproto {
  static const uint32_t offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_mc_2fcomm_2fpbtexture_2eproto;
namespace mc {
namespace comm {
class PBTexture;
struct PBTextureDefaultTypeInternal;
extern PBTextureDefaultTypeInternal _PBTexture_default_instance_;
}  // namespace comm
}  // namespace mc
PROTOBUF_NAMESPACE_OPEN
template<> ::mc::comm::PBTexture* Arena::CreateMaybeMessage<::mc::comm::PBTexture>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace mc {
namespace comm {

// ===================================================================

class PBTexture final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:mc.comm.PBTexture) */ {
 public:
  inline PBTexture() : PBTexture(nullptr) {}
  ~PBTexture() override;
  explicit PROTOBUF_CONSTEXPR PBTexture(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  PBTexture(const PBTexture& from);
  PBTexture(PBTexture&& from) noexcept
    : PBTexture() {
    *this = ::std::move(from);
  }

  inline PBTexture& operator=(const PBTexture& from) {
    CopyFrom(from);
    return *this;
  }
  inline PBTexture& operator=(PBTexture&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const PBTexture& default_instance() {
    return *internal_default_instance();
  }
  static inline const PBTexture* internal_default_instance() {
    return reinterpret_cast<const PBTexture*>(
               &_PBTexture_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(PBTexture& a, PBTexture& b) {
    a.Swap(&b);
  }
  inline void Swap(PBTexture* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(PBTexture* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  PBTexture* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<PBTexture>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const PBTexture& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const PBTexture& from) {
    PBTexture::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(PBTexture* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "mc.comm.PBTexture";
  }
  protected:
  explicit PBTexture(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kImageListFieldNumber = 7,
    kImageFieldNumber = 5,
    kMagFilterFieldNumber = 1,
    kMinFilterFieldNumber = 2,
    kWrapSFieldNumber = 3,
    kWrapTFieldNumber = 4,
    kWrapRFieldNumber = 6,
    kTextureTypeFieldNumber = 8,
  };
  // repeated string image_list = 7;
  int image_list_size() const;
  private:
  int _internal_image_list_size() const;
  public:
  void clear_image_list();
  const std::string& image_list(int index) const;
  std::string* mutable_image_list(int index);
  void set_image_list(int index, const std::string& value);
  void set_image_list(int index, std::string&& value);
  void set_image_list(int index, const char* value);
  void set_image_list(int index, const char* value, size_t size);
  std::string* add_image_list();
  void add_image_list(const std::string& value);
  void add_image_list(std::string&& value);
  void add_image_list(const char* value);
  void add_image_list(const char* value, size_t size);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>& image_list() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>* mutable_image_list();
  private:
  const std::string& _internal_image_list(int index) const;
  std::string* _internal_add_image_list();
  public:

  // string image = 5;
  void clear_image();
  const std::string& image() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_image(ArgT0&& arg0, ArgT... args);
  std::string* mutable_image();
  PROTOBUF_NODISCARD std::string* release_image();
  void set_allocated_image(std::string* image);
  private:
  const std::string& _internal_image() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_image(const std::string& value);
  std::string* _internal_mutable_image();
  public:

  // int32 magFilter = 1;
  void clear_magfilter();
  int32_t magfilter() const;
  void set_magfilter(int32_t value);
  private:
  int32_t _internal_magfilter() const;
  void _internal_set_magfilter(int32_t value);
  public:

  // int32 minFilter = 2;
  void clear_minfilter();
  int32_t minfilter() const;
  void set_minfilter(int32_t value);
  private:
  int32_t _internal_minfilter() const;
  void _internal_set_minfilter(int32_t value);
  public:

  // int32 wrapS = 3;
  void clear_wraps();
  int32_t wraps() const;
  void set_wraps(int32_t value);
  private:
  int32_t _internal_wraps() const;
  void _internal_set_wraps(int32_t value);
  public:

  // int32 wrapT = 4;
  void clear_wrapt();
  int32_t wrapt() const;
  void set_wrapt(int32_t value);
  private:
  int32_t _internal_wrapt() const;
  void _internal_set_wrapt(int32_t value);
  public:

  // int32 wrapR = 6;
  void clear_wrapr();
  int32_t wrapr() const;
  void set_wrapr(int32_t value);
  private:
  int32_t _internal_wrapr() const;
  void _internal_set_wrapr(int32_t value);
  public:

  // int32 texture_type = 8;
  void clear_texture_type();
  int32_t texture_type() const;
  void set_texture_type(int32_t value);
  private:
  int32_t _internal_texture_type() const;
  void _internal_set_texture_type(int32_t value);
  public:

  // @@protoc_insertion_point(class_scope:mc.comm.PBTexture)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string> image_list_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr image_;
    int32_t magfilter_;
    int32_t minfilter_;
    int32_t wraps_;
    int32_t wrapt_;
    int32_t wrapr_;
    int32_t texture_type_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_mc_2fcomm_2fpbtexture_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// PBTexture

// int32 magFilter = 1;
inline void PBTexture::clear_magfilter() {
  _impl_.magfilter_ = 0;
}
inline int32_t PBTexture::_internal_magfilter() const {
  return _impl_.magfilter_;
}
inline int32_t PBTexture::magfilter() const {
  // @@protoc_insertion_point(field_get:mc.comm.PBTexture.magFilter)
  return _internal_magfilter();
}
inline void PBTexture::_internal_set_magfilter(int32_t value) {
  
  _impl_.magfilter_ = value;
}
inline void PBTexture::set_magfilter(int32_t value) {
  _internal_set_magfilter(value);
  // @@protoc_insertion_point(field_set:mc.comm.PBTexture.magFilter)
}

// int32 minFilter = 2;
inline void PBTexture::clear_minfilter() {
  _impl_.minfilter_ = 0;
}
inline int32_t PBTexture::_internal_minfilter() const {
  return _impl_.minfilter_;
}
inline int32_t PBTexture::minfilter() const {
  // @@protoc_insertion_point(field_get:mc.comm.PBTexture.minFilter)
  return _internal_minfilter();
}
inline void PBTexture::_internal_set_minfilter(int32_t value) {
  
  _impl_.minfilter_ = value;
}
inline void PBTexture::set_minfilter(int32_t value) {
  _internal_set_minfilter(value);
  // @@protoc_insertion_point(field_set:mc.comm.PBTexture.minFilter)
}

// int32 wrapS = 3;
inline void PBTexture::clear_wraps() {
  _impl_.wraps_ = 0;
}
inline int32_t PBTexture::_internal_wraps() const {
  return _impl_.wraps_;
}
inline int32_t PBTexture::wraps() const {
  // @@protoc_insertion_point(field_get:mc.comm.PBTexture.wrapS)
  return _internal_wraps();
}
inline void PBTexture::_internal_set_wraps(int32_t value) {
  
  _impl_.wraps_ = value;
}
inline void PBTexture::set_wraps(int32_t value) {
  _internal_set_wraps(value);
  // @@protoc_insertion_point(field_set:mc.comm.PBTexture.wrapS)
}

// int32 wrapT = 4;
inline void PBTexture::clear_wrapt() {
  _impl_.wrapt_ = 0;
}
inline int32_t PBTexture::_internal_wrapt() const {
  return _impl_.wrapt_;
}
inline int32_t PBTexture::wrapt() const {
  // @@protoc_insertion_point(field_get:mc.comm.PBTexture.wrapT)
  return _internal_wrapt();
}
inline void PBTexture::_internal_set_wrapt(int32_t value) {
  
  _impl_.wrapt_ = value;
}
inline void PBTexture::set_wrapt(int32_t value) {
  _internal_set_wrapt(value);
  // @@protoc_insertion_point(field_set:mc.comm.PBTexture.wrapT)
}

// string image = 5;
inline void PBTexture::clear_image() {
  _impl_.image_.ClearToEmpty();
}
inline const std::string& PBTexture::image() const {
  // @@protoc_insertion_point(field_get:mc.comm.PBTexture.image)
  return _internal_image();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void PBTexture::set_image(ArgT0&& arg0, ArgT... args) {
 
 _impl_.image_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:mc.comm.PBTexture.image)
}
inline std::string* PBTexture::mutable_image() {
  std::string* _s = _internal_mutable_image();
  // @@protoc_insertion_point(field_mutable:mc.comm.PBTexture.image)
  return _s;
}
inline const std::string& PBTexture::_internal_image() const {
  return _impl_.image_.Get();
}
inline void PBTexture::_internal_set_image(const std::string& value) {
  
  _impl_.image_.Set(value, GetArenaForAllocation());
}
inline std::string* PBTexture::_internal_mutable_image() {
  
  return _impl_.image_.Mutable(GetArenaForAllocation());
}
inline std::string* PBTexture::release_image() {
  // @@protoc_insertion_point(field_release:mc.comm.PBTexture.image)
  return _impl_.image_.Release();
}
inline void PBTexture::set_allocated_image(std::string* image) {
  if (image != nullptr) {
    
  } else {
    
  }
  _impl_.image_.SetAllocated(image, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.image_.IsDefault()) {
    _impl_.image_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:mc.comm.PBTexture.image)
}

// int32 wrapR = 6;
inline void PBTexture::clear_wrapr() {
  _impl_.wrapr_ = 0;
}
inline int32_t PBTexture::_internal_wrapr() const {
  return _impl_.wrapr_;
}
inline int32_t PBTexture::wrapr() const {
  // @@protoc_insertion_point(field_get:mc.comm.PBTexture.wrapR)
  return _internal_wrapr();
}
inline void PBTexture::_internal_set_wrapr(int32_t value) {
  
  _impl_.wrapr_ = value;
}
inline void PBTexture::set_wrapr(int32_t value) {
  _internal_set_wrapr(value);
  // @@protoc_insertion_point(field_set:mc.comm.PBTexture.wrapR)
}

// repeated string image_list = 7;
inline int PBTexture::_internal_image_list_size() const {
  return _impl_.image_list_.size();
}
inline int PBTexture::image_list_size() const {
  return _internal_image_list_size();
}
inline void PBTexture::clear_image_list() {
  _impl_.image_list_.Clear();
}
inline std::string* PBTexture::add_image_list() {
  std::string* _s = _internal_add_image_list();
  // @@protoc_insertion_point(field_add_mutable:mc.comm.PBTexture.image_list)
  return _s;
}
inline const std::string& PBTexture::_internal_image_list(int index) const {
  return _impl_.image_list_.Get(index);
}
inline const std::string& PBTexture::image_list(int index) const {
  // @@protoc_insertion_point(field_get:mc.comm.PBTexture.image_list)
  return _internal_image_list(index);
}
inline std::string* PBTexture::mutable_image_list(int index) {
  // @@protoc_insertion_point(field_mutable:mc.comm.PBTexture.image_list)
  return _impl_.image_list_.Mutable(index);
}
inline void PBTexture::set_image_list(int index, const std::string& value) {
  _impl_.image_list_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set:mc.comm.PBTexture.image_list)
}
inline void PBTexture::set_image_list(int index, std::string&& value) {
  _impl_.image_list_.Mutable(index)->assign(std::move(value));
  // @@protoc_insertion_point(field_set:mc.comm.PBTexture.image_list)
}
inline void PBTexture::set_image_list(int index, const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _impl_.image_list_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:mc.comm.PBTexture.image_list)
}
inline void PBTexture::set_image_list(int index, const char* value, size_t size) {
  _impl_.image_list_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:mc.comm.PBTexture.image_list)
}
inline std::string* PBTexture::_internal_add_image_list() {
  return _impl_.image_list_.Add();
}
inline void PBTexture::add_image_list(const std::string& value) {
  _impl_.image_list_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:mc.comm.PBTexture.image_list)
}
inline void PBTexture::add_image_list(std::string&& value) {
  _impl_.image_list_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:mc.comm.PBTexture.image_list)
}
inline void PBTexture::add_image_list(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _impl_.image_list_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:mc.comm.PBTexture.image_list)
}
inline void PBTexture::add_image_list(const char* value, size_t size) {
  _impl_.image_list_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:mc.comm.PBTexture.image_list)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>&
PBTexture::image_list() const {
  // @@protoc_insertion_point(field_list:mc.comm.PBTexture.image_list)
  return _impl_.image_list_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>*
PBTexture::mutable_image_list() {
  // @@protoc_insertion_point(field_mutable_list:mc.comm.PBTexture.image_list)
  return &_impl_.image_list_;
}

// int32 texture_type = 8;
inline void PBTexture::clear_texture_type() {
  _impl_.texture_type_ = 0;
}
inline int32_t PBTexture::_internal_texture_type() const {
  return _impl_.texture_type_;
}
inline int32_t PBTexture::texture_type() const {
  // @@protoc_insertion_point(field_get:mc.comm.PBTexture.texture_type)
  return _internal_texture_type();
}
inline void PBTexture::_internal_set_texture_type(int32_t value) {
  
  _impl_.texture_type_ = value;
}
inline void PBTexture::set_texture_type(int32_t value) {
  _internal_set_texture_type(value);
  // @@protoc_insertion_point(field_set:mc.comm.PBTexture.texture_type)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__

// @@protoc_insertion_point(namespace_scope)

}  // namespace comm
}  // namespace mc

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_mc_2fcomm_2fpbtexture_2eproto
