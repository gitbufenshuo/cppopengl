// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: mc/comm/pbnode.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_mc_2fcomm_2fpbnode_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_mc_2fcomm_2fpbnode_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3021000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3021005 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_mc_2fcomm_2fpbnode_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_mc_2fcomm_2fpbnode_2eproto {
  static const uint32_t offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_mc_2fcomm_2fpbnode_2eproto;
namespace mc {
namespace comm {
class PBNode;
struct PBNodeDefaultTypeInternal;
extern PBNodeDefaultTypeInternal _PBNode_default_instance_;
class PBScene;
struct PBSceneDefaultTypeInternal;
extern PBSceneDefaultTypeInternal _PBScene_default_instance_;
class PBTransform;
struct PBTransformDefaultTypeInternal;
extern PBTransformDefaultTypeInternal _PBTransform_default_instance_;
class PBVec4;
struct PBVec4DefaultTypeInternal;
extern PBVec4DefaultTypeInternal _PBVec4_default_instance_;
}  // namespace comm
}  // namespace mc
PROTOBUF_NAMESPACE_OPEN
template<> ::mc::comm::PBNode* Arena::CreateMaybeMessage<::mc::comm::PBNode>(Arena*);
template<> ::mc::comm::PBScene* Arena::CreateMaybeMessage<::mc::comm::PBScene>(Arena*);
template<> ::mc::comm::PBTransform* Arena::CreateMaybeMessage<::mc::comm::PBTransform>(Arena*);
template<> ::mc::comm::PBVec4* Arena::CreateMaybeMessage<::mc::comm::PBVec4>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace mc {
namespace comm {

// ===================================================================

class PBVec4 final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:mc.comm.PBVec4) */ {
 public:
  inline PBVec4() : PBVec4(nullptr) {}
  ~PBVec4() override;
  explicit PROTOBUF_CONSTEXPR PBVec4(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  PBVec4(const PBVec4& from);
  PBVec4(PBVec4&& from) noexcept
    : PBVec4() {
    *this = ::std::move(from);
  }

  inline PBVec4& operator=(const PBVec4& from) {
    CopyFrom(from);
    return *this;
  }
  inline PBVec4& operator=(PBVec4&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const PBVec4& default_instance() {
    return *internal_default_instance();
  }
  static inline const PBVec4* internal_default_instance() {
    return reinterpret_cast<const PBVec4*>(
               &_PBVec4_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(PBVec4& a, PBVec4& b) {
    a.Swap(&b);
  }
  inline void Swap(PBVec4* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(PBVec4* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  PBVec4* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<PBVec4>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const PBVec4& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const PBVec4& from) {
    PBVec4::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(PBVec4* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "mc.comm.PBVec4";
  }
  protected:
  explicit PBVec4(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kWFieldNumber = 1,
    kXFieldNumber = 2,
    kYFieldNumber = 3,
    kZFieldNumber = 4,
  };
  // float w = 1;
  void clear_w();
  float w() const;
  void set_w(float value);
  private:
  float _internal_w() const;
  void _internal_set_w(float value);
  public:

  // float x = 2;
  void clear_x();
  float x() const;
  void set_x(float value);
  private:
  float _internal_x() const;
  void _internal_set_x(float value);
  public:

  // float y = 3;
  void clear_y();
  float y() const;
  void set_y(float value);
  private:
  float _internal_y() const;
  void _internal_set_y(float value);
  public:

  // float z = 4;
  void clear_z();
  float z() const;
  void set_z(float value);
  private:
  float _internal_z() const;
  void _internal_set_z(float value);
  public:

  // @@protoc_insertion_point(class_scope:mc.comm.PBVec4)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    float w_;
    float x_;
    float y_;
    float z_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_mc_2fcomm_2fpbnode_2eproto;
};
// -------------------------------------------------------------------

class PBTransform final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:mc.comm.PBTransform) */ {
 public:
  inline PBTransform() : PBTransform(nullptr) {}
  ~PBTransform() override;
  explicit PROTOBUF_CONSTEXPR PBTransform(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  PBTransform(const PBTransform& from);
  PBTransform(PBTransform&& from) noexcept
    : PBTransform() {
    *this = ::std::move(from);
  }

  inline PBTransform& operator=(const PBTransform& from) {
    CopyFrom(from);
    return *this;
  }
  inline PBTransform& operator=(PBTransform&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const PBTransform& default_instance() {
    return *internal_default_instance();
  }
  static inline const PBTransform* internal_default_instance() {
    return reinterpret_cast<const PBTransform*>(
               &_PBTransform_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(PBTransform& a, PBTransform& b) {
    a.Swap(&b);
  }
  inline void Swap(PBTransform* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(PBTransform* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  PBTransform* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<PBTransform>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const PBTransform& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const PBTransform& from) {
    PBTransform::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(PBTransform* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "mc.comm.PBTransform";
  }
  protected:
  explicit PBTransform(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kTranslateFieldNumber = 1,
    kRotationFieldNumber = 2,
  };
  // .mc.comm.PBVec4 translate = 1;
  bool has_translate() const;
  private:
  bool _internal_has_translate() const;
  public:
  void clear_translate();
  const ::mc::comm::PBVec4& translate() const;
  PROTOBUF_NODISCARD ::mc::comm::PBVec4* release_translate();
  ::mc::comm::PBVec4* mutable_translate();
  void set_allocated_translate(::mc::comm::PBVec4* translate);
  private:
  const ::mc::comm::PBVec4& _internal_translate() const;
  ::mc::comm::PBVec4* _internal_mutable_translate();
  public:
  void unsafe_arena_set_allocated_translate(
      ::mc::comm::PBVec4* translate);
  ::mc::comm::PBVec4* unsafe_arena_release_translate();

  // .mc.comm.PBVec4 rotation = 2;
  bool has_rotation() const;
  private:
  bool _internal_has_rotation() const;
  public:
  void clear_rotation();
  const ::mc::comm::PBVec4& rotation() const;
  PROTOBUF_NODISCARD ::mc::comm::PBVec4* release_rotation();
  ::mc::comm::PBVec4* mutable_rotation();
  void set_allocated_rotation(::mc::comm::PBVec4* rotation);
  private:
  const ::mc::comm::PBVec4& _internal_rotation() const;
  ::mc::comm::PBVec4* _internal_mutable_rotation();
  public:
  void unsafe_arena_set_allocated_rotation(
      ::mc::comm::PBVec4* rotation);
  ::mc::comm::PBVec4* unsafe_arena_release_rotation();

  // @@protoc_insertion_point(class_scope:mc.comm.PBTransform)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::mc::comm::PBVec4* translate_;
    ::mc::comm::PBVec4* rotation_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_mc_2fcomm_2fpbnode_2eproto;
};
// -------------------------------------------------------------------

class PBNode final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:mc.comm.PBNode) */ {
 public:
  inline PBNode() : PBNode(nullptr) {}
  ~PBNode() override;
  explicit PROTOBUF_CONSTEXPR PBNode(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  PBNode(const PBNode& from);
  PBNode(PBNode&& from) noexcept
    : PBNode() {
    *this = ::std::move(from);
  }

  inline PBNode& operator=(const PBNode& from) {
    CopyFrom(from);
    return *this;
  }
  inline PBNode& operator=(PBNode&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const PBNode& default_instance() {
    return *internal_default_instance();
  }
  static inline const PBNode* internal_default_instance() {
    return reinterpret_cast<const PBNode*>(
               &_PBNode_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(PBNode& a, PBNode& b) {
    a.Swap(&b);
  }
  inline void Swap(PBNode* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(PBNode* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  PBNode* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<PBNode>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const PBNode& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const PBNode& from) {
    PBNode::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(PBNode* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "mc.comm.PBNode";
  }
  protected:
  explicit PBNode(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kLogicSupportListFieldNumber = 2,
    kModelListFieldNumber = 3,
    kSubListFieldNumber = 5,
    kMaterialFieldNumber = 4,
    kTransformFieldNumber = 1,
  };
  // repeated string logic_support_list = 2;
  int logic_support_list_size() const;
  private:
  int _internal_logic_support_list_size() const;
  public:
  void clear_logic_support_list();
  const std::string& logic_support_list(int index) const;
  std::string* mutable_logic_support_list(int index);
  void set_logic_support_list(int index, const std::string& value);
  void set_logic_support_list(int index, std::string&& value);
  void set_logic_support_list(int index, const char* value);
  void set_logic_support_list(int index, const char* value, size_t size);
  std::string* add_logic_support_list();
  void add_logic_support_list(const std::string& value);
  void add_logic_support_list(std::string&& value);
  void add_logic_support_list(const char* value);
  void add_logic_support_list(const char* value, size_t size);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>& logic_support_list() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>* mutable_logic_support_list();
  private:
  const std::string& _internal_logic_support_list(int index) const;
  std::string* _internal_add_logic_support_list();
  public:

  // repeated string model_list = 3;
  int model_list_size() const;
  private:
  int _internal_model_list_size() const;
  public:
  void clear_model_list();
  const std::string& model_list(int index) const;
  std::string* mutable_model_list(int index);
  void set_model_list(int index, const std::string& value);
  void set_model_list(int index, std::string&& value);
  void set_model_list(int index, const char* value);
  void set_model_list(int index, const char* value, size_t size);
  std::string* add_model_list();
  void add_model_list(const std::string& value);
  void add_model_list(std::string&& value);
  void add_model_list(const char* value);
  void add_model_list(const char* value, size_t size);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>& model_list() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>* mutable_model_list();
  private:
  const std::string& _internal_model_list(int index) const;
  std::string* _internal_add_model_list();
  public:

  // repeated .mc.comm.PBNode sub_list = 5;
  int sub_list_size() const;
  private:
  int _internal_sub_list_size() const;
  public:
  void clear_sub_list();
  ::mc::comm::PBNode* mutable_sub_list(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::mc::comm::PBNode >*
      mutable_sub_list();
  private:
  const ::mc::comm::PBNode& _internal_sub_list(int index) const;
  ::mc::comm::PBNode* _internal_add_sub_list();
  public:
  const ::mc::comm::PBNode& sub_list(int index) const;
  ::mc::comm::PBNode* add_sub_list();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::mc::comm::PBNode >&
      sub_list() const;

  // string material = 4;
  void clear_material();
  const std::string& material() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_material(ArgT0&& arg0, ArgT... args);
  std::string* mutable_material();
  PROTOBUF_NODISCARD std::string* release_material();
  void set_allocated_material(std::string* material);
  private:
  const std::string& _internal_material() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_material(const std::string& value);
  std::string* _internal_mutable_material();
  public:

  // .mc.comm.PBTransform transform = 1;
  bool has_transform() const;
  private:
  bool _internal_has_transform() const;
  public:
  void clear_transform();
  const ::mc::comm::PBTransform& transform() const;
  PROTOBUF_NODISCARD ::mc::comm::PBTransform* release_transform();
  ::mc::comm::PBTransform* mutable_transform();
  void set_allocated_transform(::mc::comm::PBTransform* transform);
  private:
  const ::mc::comm::PBTransform& _internal_transform() const;
  ::mc::comm::PBTransform* _internal_mutable_transform();
  public:
  void unsafe_arena_set_allocated_transform(
      ::mc::comm::PBTransform* transform);
  ::mc::comm::PBTransform* unsafe_arena_release_transform();

  // @@protoc_insertion_point(class_scope:mc.comm.PBNode)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string> logic_support_list_;
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string> model_list_;
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::mc::comm::PBNode > sub_list_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr material_;
    ::mc::comm::PBTransform* transform_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_mc_2fcomm_2fpbnode_2eproto;
};
// -------------------------------------------------------------------

class PBScene final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:mc.comm.PBScene) */ {
 public:
  inline PBScene() : PBScene(nullptr) {}
  ~PBScene() override;
  explicit PROTOBUF_CONSTEXPR PBScene(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  PBScene(const PBScene& from);
  PBScene(PBScene&& from) noexcept
    : PBScene() {
    *this = ::std::move(from);
  }

  inline PBScene& operator=(const PBScene& from) {
    CopyFrom(from);
    return *this;
  }
  inline PBScene& operator=(PBScene&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const PBScene& default_instance() {
    return *internal_default_instance();
  }
  static inline const PBScene* internal_default_instance() {
    return reinterpret_cast<const PBScene*>(
               &_PBScene_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  friend void swap(PBScene& a, PBScene& b) {
    a.Swap(&b);
  }
  inline void Swap(PBScene* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(PBScene* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  PBScene* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<PBScene>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const PBScene& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const PBScene& from) {
    PBScene::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(PBScene* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "mc.comm.PBScene";
  }
  protected:
  explicit PBScene(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kRootListFieldNumber = 1,
  };
  // repeated .mc.comm.PBNode root_list = 1;
  int root_list_size() const;
  private:
  int _internal_root_list_size() const;
  public:
  void clear_root_list();
  ::mc::comm::PBNode* mutable_root_list(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::mc::comm::PBNode >*
      mutable_root_list();
  private:
  const ::mc::comm::PBNode& _internal_root_list(int index) const;
  ::mc::comm::PBNode* _internal_add_root_list();
  public:
  const ::mc::comm::PBNode& root_list(int index) const;
  ::mc::comm::PBNode* add_root_list();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::mc::comm::PBNode >&
      root_list() const;

  // @@protoc_insertion_point(class_scope:mc.comm.PBScene)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::mc::comm::PBNode > root_list_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_mc_2fcomm_2fpbnode_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// PBVec4

// float w = 1;
inline void PBVec4::clear_w() {
  _impl_.w_ = 0;
}
inline float PBVec4::_internal_w() const {
  return _impl_.w_;
}
inline float PBVec4::w() const {
  // @@protoc_insertion_point(field_get:mc.comm.PBVec4.w)
  return _internal_w();
}
inline void PBVec4::_internal_set_w(float value) {
  
  _impl_.w_ = value;
}
inline void PBVec4::set_w(float value) {
  _internal_set_w(value);
  // @@protoc_insertion_point(field_set:mc.comm.PBVec4.w)
}

// float x = 2;
inline void PBVec4::clear_x() {
  _impl_.x_ = 0;
}
inline float PBVec4::_internal_x() const {
  return _impl_.x_;
}
inline float PBVec4::x() const {
  // @@protoc_insertion_point(field_get:mc.comm.PBVec4.x)
  return _internal_x();
}
inline void PBVec4::_internal_set_x(float value) {
  
  _impl_.x_ = value;
}
inline void PBVec4::set_x(float value) {
  _internal_set_x(value);
  // @@protoc_insertion_point(field_set:mc.comm.PBVec4.x)
}

// float y = 3;
inline void PBVec4::clear_y() {
  _impl_.y_ = 0;
}
inline float PBVec4::_internal_y() const {
  return _impl_.y_;
}
inline float PBVec4::y() const {
  // @@protoc_insertion_point(field_get:mc.comm.PBVec4.y)
  return _internal_y();
}
inline void PBVec4::_internal_set_y(float value) {
  
  _impl_.y_ = value;
}
inline void PBVec4::set_y(float value) {
  _internal_set_y(value);
  // @@protoc_insertion_point(field_set:mc.comm.PBVec4.y)
}

// float z = 4;
inline void PBVec4::clear_z() {
  _impl_.z_ = 0;
}
inline float PBVec4::_internal_z() const {
  return _impl_.z_;
}
inline float PBVec4::z() const {
  // @@protoc_insertion_point(field_get:mc.comm.PBVec4.z)
  return _internal_z();
}
inline void PBVec4::_internal_set_z(float value) {
  
  _impl_.z_ = value;
}
inline void PBVec4::set_z(float value) {
  _internal_set_z(value);
  // @@protoc_insertion_point(field_set:mc.comm.PBVec4.z)
}

// -------------------------------------------------------------------

// PBTransform

// .mc.comm.PBVec4 translate = 1;
inline bool PBTransform::_internal_has_translate() const {
  return this != internal_default_instance() && _impl_.translate_ != nullptr;
}
inline bool PBTransform::has_translate() const {
  return _internal_has_translate();
}
inline void PBTransform::clear_translate() {
  if (GetArenaForAllocation() == nullptr && _impl_.translate_ != nullptr) {
    delete _impl_.translate_;
  }
  _impl_.translate_ = nullptr;
}
inline const ::mc::comm::PBVec4& PBTransform::_internal_translate() const {
  const ::mc::comm::PBVec4* p = _impl_.translate_;
  return p != nullptr ? *p : reinterpret_cast<const ::mc::comm::PBVec4&>(
      ::mc::comm::_PBVec4_default_instance_);
}
inline const ::mc::comm::PBVec4& PBTransform::translate() const {
  // @@protoc_insertion_point(field_get:mc.comm.PBTransform.translate)
  return _internal_translate();
}
inline void PBTransform::unsafe_arena_set_allocated_translate(
    ::mc::comm::PBVec4* translate) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.translate_);
  }
  _impl_.translate_ = translate;
  if (translate) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:mc.comm.PBTransform.translate)
}
inline ::mc::comm::PBVec4* PBTransform::release_translate() {
  
  ::mc::comm::PBVec4* temp = _impl_.translate_;
  _impl_.translate_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::mc::comm::PBVec4* PBTransform::unsafe_arena_release_translate() {
  // @@protoc_insertion_point(field_release:mc.comm.PBTransform.translate)
  
  ::mc::comm::PBVec4* temp = _impl_.translate_;
  _impl_.translate_ = nullptr;
  return temp;
}
inline ::mc::comm::PBVec4* PBTransform::_internal_mutable_translate() {
  
  if (_impl_.translate_ == nullptr) {
    auto* p = CreateMaybeMessage<::mc::comm::PBVec4>(GetArenaForAllocation());
    _impl_.translate_ = p;
  }
  return _impl_.translate_;
}
inline ::mc::comm::PBVec4* PBTransform::mutable_translate() {
  ::mc::comm::PBVec4* _msg = _internal_mutable_translate();
  // @@protoc_insertion_point(field_mutable:mc.comm.PBTransform.translate)
  return _msg;
}
inline void PBTransform::set_allocated_translate(::mc::comm::PBVec4* translate) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.translate_;
  }
  if (translate) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(translate);
    if (message_arena != submessage_arena) {
      translate = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, translate, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.translate_ = translate;
  // @@protoc_insertion_point(field_set_allocated:mc.comm.PBTransform.translate)
}

// .mc.comm.PBVec4 rotation = 2;
inline bool PBTransform::_internal_has_rotation() const {
  return this != internal_default_instance() && _impl_.rotation_ != nullptr;
}
inline bool PBTransform::has_rotation() const {
  return _internal_has_rotation();
}
inline void PBTransform::clear_rotation() {
  if (GetArenaForAllocation() == nullptr && _impl_.rotation_ != nullptr) {
    delete _impl_.rotation_;
  }
  _impl_.rotation_ = nullptr;
}
inline const ::mc::comm::PBVec4& PBTransform::_internal_rotation() const {
  const ::mc::comm::PBVec4* p = _impl_.rotation_;
  return p != nullptr ? *p : reinterpret_cast<const ::mc::comm::PBVec4&>(
      ::mc::comm::_PBVec4_default_instance_);
}
inline const ::mc::comm::PBVec4& PBTransform::rotation() const {
  // @@protoc_insertion_point(field_get:mc.comm.PBTransform.rotation)
  return _internal_rotation();
}
inline void PBTransform::unsafe_arena_set_allocated_rotation(
    ::mc::comm::PBVec4* rotation) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.rotation_);
  }
  _impl_.rotation_ = rotation;
  if (rotation) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:mc.comm.PBTransform.rotation)
}
inline ::mc::comm::PBVec4* PBTransform::release_rotation() {
  
  ::mc::comm::PBVec4* temp = _impl_.rotation_;
  _impl_.rotation_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::mc::comm::PBVec4* PBTransform::unsafe_arena_release_rotation() {
  // @@protoc_insertion_point(field_release:mc.comm.PBTransform.rotation)
  
  ::mc::comm::PBVec4* temp = _impl_.rotation_;
  _impl_.rotation_ = nullptr;
  return temp;
}
inline ::mc::comm::PBVec4* PBTransform::_internal_mutable_rotation() {
  
  if (_impl_.rotation_ == nullptr) {
    auto* p = CreateMaybeMessage<::mc::comm::PBVec4>(GetArenaForAllocation());
    _impl_.rotation_ = p;
  }
  return _impl_.rotation_;
}
inline ::mc::comm::PBVec4* PBTransform::mutable_rotation() {
  ::mc::comm::PBVec4* _msg = _internal_mutable_rotation();
  // @@protoc_insertion_point(field_mutable:mc.comm.PBTransform.rotation)
  return _msg;
}
inline void PBTransform::set_allocated_rotation(::mc::comm::PBVec4* rotation) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.rotation_;
  }
  if (rotation) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(rotation);
    if (message_arena != submessage_arena) {
      rotation = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, rotation, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.rotation_ = rotation;
  // @@protoc_insertion_point(field_set_allocated:mc.comm.PBTransform.rotation)
}

// -------------------------------------------------------------------

// PBNode

// .mc.comm.PBTransform transform = 1;
inline bool PBNode::_internal_has_transform() const {
  return this != internal_default_instance() && _impl_.transform_ != nullptr;
}
inline bool PBNode::has_transform() const {
  return _internal_has_transform();
}
inline void PBNode::clear_transform() {
  if (GetArenaForAllocation() == nullptr && _impl_.transform_ != nullptr) {
    delete _impl_.transform_;
  }
  _impl_.transform_ = nullptr;
}
inline const ::mc::comm::PBTransform& PBNode::_internal_transform() const {
  const ::mc::comm::PBTransform* p = _impl_.transform_;
  return p != nullptr ? *p : reinterpret_cast<const ::mc::comm::PBTransform&>(
      ::mc::comm::_PBTransform_default_instance_);
}
inline const ::mc::comm::PBTransform& PBNode::transform() const {
  // @@protoc_insertion_point(field_get:mc.comm.PBNode.transform)
  return _internal_transform();
}
inline void PBNode::unsafe_arena_set_allocated_transform(
    ::mc::comm::PBTransform* transform) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.transform_);
  }
  _impl_.transform_ = transform;
  if (transform) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:mc.comm.PBNode.transform)
}
inline ::mc::comm::PBTransform* PBNode::release_transform() {
  
  ::mc::comm::PBTransform* temp = _impl_.transform_;
  _impl_.transform_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::mc::comm::PBTransform* PBNode::unsafe_arena_release_transform() {
  // @@protoc_insertion_point(field_release:mc.comm.PBNode.transform)
  
  ::mc::comm::PBTransform* temp = _impl_.transform_;
  _impl_.transform_ = nullptr;
  return temp;
}
inline ::mc::comm::PBTransform* PBNode::_internal_mutable_transform() {
  
  if (_impl_.transform_ == nullptr) {
    auto* p = CreateMaybeMessage<::mc::comm::PBTransform>(GetArenaForAllocation());
    _impl_.transform_ = p;
  }
  return _impl_.transform_;
}
inline ::mc::comm::PBTransform* PBNode::mutable_transform() {
  ::mc::comm::PBTransform* _msg = _internal_mutable_transform();
  // @@protoc_insertion_point(field_mutable:mc.comm.PBNode.transform)
  return _msg;
}
inline void PBNode::set_allocated_transform(::mc::comm::PBTransform* transform) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.transform_;
  }
  if (transform) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(transform);
    if (message_arena != submessage_arena) {
      transform = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, transform, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.transform_ = transform;
  // @@protoc_insertion_point(field_set_allocated:mc.comm.PBNode.transform)
}

// repeated string logic_support_list = 2;
inline int PBNode::_internal_logic_support_list_size() const {
  return _impl_.logic_support_list_.size();
}
inline int PBNode::logic_support_list_size() const {
  return _internal_logic_support_list_size();
}
inline void PBNode::clear_logic_support_list() {
  _impl_.logic_support_list_.Clear();
}
inline std::string* PBNode::add_logic_support_list() {
  std::string* _s = _internal_add_logic_support_list();
  // @@protoc_insertion_point(field_add_mutable:mc.comm.PBNode.logic_support_list)
  return _s;
}
inline const std::string& PBNode::_internal_logic_support_list(int index) const {
  return _impl_.logic_support_list_.Get(index);
}
inline const std::string& PBNode::logic_support_list(int index) const {
  // @@protoc_insertion_point(field_get:mc.comm.PBNode.logic_support_list)
  return _internal_logic_support_list(index);
}
inline std::string* PBNode::mutable_logic_support_list(int index) {
  // @@protoc_insertion_point(field_mutable:mc.comm.PBNode.logic_support_list)
  return _impl_.logic_support_list_.Mutable(index);
}
inline void PBNode::set_logic_support_list(int index, const std::string& value) {
  _impl_.logic_support_list_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set:mc.comm.PBNode.logic_support_list)
}
inline void PBNode::set_logic_support_list(int index, std::string&& value) {
  _impl_.logic_support_list_.Mutable(index)->assign(std::move(value));
  // @@protoc_insertion_point(field_set:mc.comm.PBNode.logic_support_list)
}
inline void PBNode::set_logic_support_list(int index, const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _impl_.logic_support_list_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:mc.comm.PBNode.logic_support_list)
}
inline void PBNode::set_logic_support_list(int index, const char* value, size_t size) {
  _impl_.logic_support_list_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:mc.comm.PBNode.logic_support_list)
}
inline std::string* PBNode::_internal_add_logic_support_list() {
  return _impl_.logic_support_list_.Add();
}
inline void PBNode::add_logic_support_list(const std::string& value) {
  _impl_.logic_support_list_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:mc.comm.PBNode.logic_support_list)
}
inline void PBNode::add_logic_support_list(std::string&& value) {
  _impl_.logic_support_list_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:mc.comm.PBNode.logic_support_list)
}
inline void PBNode::add_logic_support_list(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _impl_.logic_support_list_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:mc.comm.PBNode.logic_support_list)
}
inline void PBNode::add_logic_support_list(const char* value, size_t size) {
  _impl_.logic_support_list_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:mc.comm.PBNode.logic_support_list)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>&
PBNode::logic_support_list() const {
  // @@protoc_insertion_point(field_list:mc.comm.PBNode.logic_support_list)
  return _impl_.logic_support_list_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>*
PBNode::mutable_logic_support_list() {
  // @@protoc_insertion_point(field_mutable_list:mc.comm.PBNode.logic_support_list)
  return &_impl_.logic_support_list_;
}

// repeated string model_list = 3;
inline int PBNode::_internal_model_list_size() const {
  return _impl_.model_list_.size();
}
inline int PBNode::model_list_size() const {
  return _internal_model_list_size();
}
inline void PBNode::clear_model_list() {
  _impl_.model_list_.Clear();
}
inline std::string* PBNode::add_model_list() {
  std::string* _s = _internal_add_model_list();
  // @@protoc_insertion_point(field_add_mutable:mc.comm.PBNode.model_list)
  return _s;
}
inline const std::string& PBNode::_internal_model_list(int index) const {
  return _impl_.model_list_.Get(index);
}
inline const std::string& PBNode::model_list(int index) const {
  // @@protoc_insertion_point(field_get:mc.comm.PBNode.model_list)
  return _internal_model_list(index);
}
inline std::string* PBNode::mutable_model_list(int index) {
  // @@protoc_insertion_point(field_mutable:mc.comm.PBNode.model_list)
  return _impl_.model_list_.Mutable(index);
}
inline void PBNode::set_model_list(int index, const std::string& value) {
  _impl_.model_list_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set:mc.comm.PBNode.model_list)
}
inline void PBNode::set_model_list(int index, std::string&& value) {
  _impl_.model_list_.Mutable(index)->assign(std::move(value));
  // @@protoc_insertion_point(field_set:mc.comm.PBNode.model_list)
}
inline void PBNode::set_model_list(int index, const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _impl_.model_list_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:mc.comm.PBNode.model_list)
}
inline void PBNode::set_model_list(int index, const char* value, size_t size) {
  _impl_.model_list_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:mc.comm.PBNode.model_list)
}
inline std::string* PBNode::_internal_add_model_list() {
  return _impl_.model_list_.Add();
}
inline void PBNode::add_model_list(const std::string& value) {
  _impl_.model_list_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:mc.comm.PBNode.model_list)
}
inline void PBNode::add_model_list(std::string&& value) {
  _impl_.model_list_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:mc.comm.PBNode.model_list)
}
inline void PBNode::add_model_list(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _impl_.model_list_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:mc.comm.PBNode.model_list)
}
inline void PBNode::add_model_list(const char* value, size_t size) {
  _impl_.model_list_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:mc.comm.PBNode.model_list)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>&
PBNode::model_list() const {
  // @@protoc_insertion_point(field_list:mc.comm.PBNode.model_list)
  return _impl_.model_list_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>*
PBNode::mutable_model_list() {
  // @@protoc_insertion_point(field_mutable_list:mc.comm.PBNode.model_list)
  return &_impl_.model_list_;
}

// string material = 4;
inline void PBNode::clear_material() {
  _impl_.material_.ClearToEmpty();
}
inline const std::string& PBNode::material() const {
  // @@protoc_insertion_point(field_get:mc.comm.PBNode.material)
  return _internal_material();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void PBNode::set_material(ArgT0&& arg0, ArgT... args) {
 
 _impl_.material_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:mc.comm.PBNode.material)
}
inline std::string* PBNode::mutable_material() {
  std::string* _s = _internal_mutable_material();
  // @@protoc_insertion_point(field_mutable:mc.comm.PBNode.material)
  return _s;
}
inline const std::string& PBNode::_internal_material() const {
  return _impl_.material_.Get();
}
inline void PBNode::_internal_set_material(const std::string& value) {
  
  _impl_.material_.Set(value, GetArenaForAllocation());
}
inline std::string* PBNode::_internal_mutable_material() {
  
  return _impl_.material_.Mutable(GetArenaForAllocation());
}
inline std::string* PBNode::release_material() {
  // @@protoc_insertion_point(field_release:mc.comm.PBNode.material)
  return _impl_.material_.Release();
}
inline void PBNode::set_allocated_material(std::string* material) {
  if (material != nullptr) {
    
  } else {
    
  }
  _impl_.material_.SetAllocated(material, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.material_.IsDefault()) {
    _impl_.material_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:mc.comm.PBNode.material)
}

// repeated .mc.comm.PBNode sub_list = 5;
inline int PBNode::_internal_sub_list_size() const {
  return _impl_.sub_list_.size();
}
inline int PBNode::sub_list_size() const {
  return _internal_sub_list_size();
}
inline void PBNode::clear_sub_list() {
  _impl_.sub_list_.Clear();
}
inline ::mc::comm::PBNode* PBNode::mutable_sub_list(int index) {
  // @@protoc_insertion_point(field_mutable:mc.comm.PBNode.sub_list)
  return _impl_.sub_list_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::mc::comm::PBNode >*
PBNode::mutable_sub_list() {
  // @@protoc_insertion_point(field_mutable_list:mc.comm.PBNode.sub_list)
  return &_impl_.sub_list_;
}
inline const ::mc::comm::PBNode& PBNode::_internal_sub_list(int index) const {
  return _impl_.sub_list_.Get(index);
}
inline const ::mc::comm::PBNode& PBNode::sub_list(int index) const {
  // @@protoc_insertion_point(field_get:mc.comm.PBNode.sub_list)
  return _internal_sub_list(index);
}
inline ::mc::comm::PBNode* PBNode::_internal_add_sub_list() {
  return _impl_.sub_list_.Add();
}
inline ::mc::comm::PBNode* PBNode::add_sub_list() {
  ::mc::comm::PBNode* _add = _internal_add_sub_list();
  // @@protoc_insertion_point(field_add:mc.comm.PBNode.sub_list)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::mc::comm::PBNode >&
PBNode::sub_list() const {
  // @@protoc_insertion_point(field_list:mc.comm.PBNode.sub_list)
  return _impl_.sub_list_;
}

// -------------------------------------------------------------------

// PBScene

// repeated .mc.comm.PBNode root_list = 1;
inline int PBScene::_internal_root_list_size() const {
  return _impl_.root_list_.size();
}
inline int PBScene::root_list_size() const {
  return _internal_root_list_size();
}
inline void PBScene::clear_root_list() {
  _impl_.root_list_.Clear();
}
inline ::mc::comm::PBNode* PBScene::mutable_root_list(int index) {
  // @@protoc_insertion_point(field_mutable:mc.comm.PBScene.root_list)
  return _impl_.root_list_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::mc::comm::PBNode >*
PBScene::mutable_root_list() {
  // @@protoc_insertion_point(field_mutable_list:mc.comm.PBScene.root_list)
  return &_impl_.root_list_;
}
inline const ::mc::comm::PBNode& PBScene::_internal_root_list(int index) const {
  return _impl_.root_list_.Get(index);
}
inline const ::mc::comm::PBNode& PBScene::root_list(int index) const {
  // @@protoc_insertion_point(field_get:mc.comm.PBScene.root_list)
  return _internal_root_list(index);
}
inline ::mc::comm::PBNode* PBScene::_internal_add_root_list() {
  return _impl_.root_list_.Add();
}
inline ::mc::comm::PBNode* PBScene::add_root_list() {
  ::mc::comm::PBNode* _add = _internal_add_root_list();
  // @@protoc_insertion_point(field_add:mc.comm.PBScene.root_list)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::mc::comm::PBNode >&
PBScene::root_list() const {
  // @@protoc_insertion_point(field_list:mc.comm.PBScene.root_list)
  return _impl_.root_list_;
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace comm
}  // namespace mc

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_mc_2fcomm_2fpbnode_2eproto
